// 연쇄 행렬 곱셈(CMM, Chained Matrix Multiplication)
1. 행렬은 결합법칙이 성립하므로 곱하는 순서는 중요치 않지만 곱셉의 횟수가 달라진다.
2. 곱셈의 횟수를 최소화하는 최적화 문제

// 행렬의 곱셈 총 횟수
A = i*j, B = j*k
* A×B 곱셈 총 횟수 = i*j*k

A = 20*2, B = 2*30, C = 30*12, D = 12*8
* A×B×C×D 곱셈 총 횟수
  A(B(CD)) = 3680
  (AB)(CD) = 8880
  A((BC)D) = 1232
  ((AB)C)D = 10320
  (A(BC))D = 3120

// 카탈란수(Catalan number)
행렬의 갯수 n에 따라 괄호 '(', ')'를 놓는 경우의 수가 다른다.
직접적 정의 : Cn = (2n)!/n!(n+1)!
점화식 : C0 = 1
         Cn+1 = {2(2n+1)/(n+2)}Cn
         Cn+1 = C0*Cn + C1*Cn-1 + ... +Cn*C0

// DP를 이용한 최적화
A1 = d0*d1
A2 = d1*d2
A3 = d2*d3
d = {d0, d1, d2, d3} 
(A1A2)A3 = d0*d1*d2 + d0*d2*d3 = x
A1(A2A3) = d1*d2*d3 + d0*d1*d3 = y
M[1][3] = min(x,y) //M은 최적화된 결과를 담는 배열

// 분할정복을 이용한 최적화
1. A1(A2A3...An)
2. (A1A2)(A3...An)
3. (A1A2A3)(...An)
k. (A1A2A3...Ak)(Ak+1...An)
n-1. (A1A2A3...An-1)(An)

k번째 : M[1][k] + M[k+1][n] + d0*dk*dn //분할된 두 괄호의 곱셈 총 횟수 + 두 괄호 곱하는 횟수 
n번째 : M[1][n] = mininmum(M[1][k] + M[k+1][n] + d0*dk*dn) (i<=k<=j-1)
* if i=j, M[i][j] = 0
  if i<j, M[i][j] = mininmum(M[i][k] + M[k+1][j] + di-1*dk*dj) (i<=k<=j-1) //i>j인 대각선 밑부분은 필요없음

1. Set all the entries to 0 in main diagonal
2. Compute all the entries in diagonal 1, then compute all the entries
3. Continue in this manner to the final answer in diagonal n

