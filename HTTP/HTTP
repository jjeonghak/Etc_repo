//HTTP(HyperText Transfer Protocol)
  HTML, Text, image, video
  JSON, XML(API)
  대부분의 데이터 형태 전송 가능(바이트로 표현 가능한 모든 데이터 )
  클라이언트 서버 구조
      Request Response 구조
      클라이언트는 서버에 요청을 보내고 응답 대기
      서버는 요청에 대한 결과를 만들어 응답
  무상태 프로토콜 지향(stateless)
      서버가 클라이언트 상태를 보존하지 않아 아무 서버와 통신 가능
      클라이언트의 요청이 크게 증가해도 많은 수의 서버를 투입가능(서버 확장성, scale out)
  비연결성
      클라이언트의 요청이 있을 때마다 서버와 연결, 응답 후 연결 해제
      연결을 할때마다 TCP 3 way handshake 시간 추가
      HTTP 지속 연결로 문제점 해결
  


//역사
  1991년 : HTTP/0.9 GET 메서드만 지원, HTTP 해더 없음
  1996년 : HTTP/1.0 메서드와 해더 추가
  1997년 : HTTP/1.1 가장 보편적인 버전
  2015년 : HTTP/2 성능 개선
  현재 : HTTP/3 진행중 TCP 대신 UDP 사용


//기반 프로토콜
  주로 HTTP/1.1 사용
  HTTP/3 점차 성장중
      TCP : HTTP/1.1, HTTP/2
      UDP : HTTP/3


//HTTP 메시지 구조
 CRLF : 엔터
 SP : 스페이스
 OWS : 스페이스 허용
 
 rfc 7230 표준 스펙 
     HTTP-message = start-line
                    *( header-field CRLF )
                    CRLF
                    [ message-body ]

  1. start-line
    요청 메시지 : request-line
      request-line = method SP request-target SP HTTP-version CRLF
        method : GET(조회), POST(요청 내역 처리), PUT, DELETE ...
        request-target : absolute-path[?query], 절대경로="/"
        HTTP-version : HTTP 버전
        
    응답 메시지 : status-line
      status-line = HTTP-version SP status-code SP reason-phrase CRLF
        HTTP-version : HTTP 버전
        status-code : HTTP 상태 코드
            성공 : 200
            클라이언트 요청 오류 : 400
            서버 내부 오류 : 500
        reason-phrase : 상태를 사람이 이해할 수 있는 자연어로 표시

  2. HTTP header
    HTTP 전송에 필요한 모든 부가정보
      메시지 내용, 크기, 압축, 인증 등의 정보
    header-field = field-name ":" OWS field-value OWS 
    field-name : 대소문자 구분없는 필드이름

  3. HTTP message-body
    실제 전송할 데이터
    


