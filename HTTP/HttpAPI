//API(Application Programming Interface)
  컴퓨터와 컴퓨터 프로그램 사이의 연결
  일종의 소프트웨어 인터페이스이며 다른 종류의 소프트웨어 서비스 제공
  
  
//API URI 설계
  요구사항 기반으로 API를 설계하는 경우 리소스 식별이 최우선
      회원 등록, 수정, 조회 -> 리소스는 회원 -> 회원 리소스를 URI 매핑(계층 구조 활용)
  리소스는 URI가 식별하고 행위는 HTTP 메서드로 관리
      리소스 : 회원(URI)
      행위 : 등록, 수정, 조회(HTTP 메서드)
  부득이한 경우 컨트롤 URI를 사용해서 리소스와 행위를 같이 관리(최대한 리소스만을 분리)
      /members/{memberId}/controlBehavior


//문서(document)
  단일 개념(하나의 파일, 객체 인스턴스, 데이터베이스 row 등)


//컬렉션(collection)
  서버가 관리하는 리소스 디렉토리
  서버가 리소스의 URI 생성 및 관리
  POST 메서드와 함꼐 사용, 클라이언트는 요청만하고 서버가 처리
  

//스토어(store)
  클라이언트가 관리하는 리소스 저장소
  클라이언트가 리소스의 URI 관리
  PUT 메서드와 함께 사용, 클라이언트가 리소스의 구체적인 경로까지 관리


//컨트롤러(controller)
  컨트롤 URI
  문서, 컬렉션, 스토어로 해결하기 어려운 추가 프로세스 실행
  랭위를 URI에 리소스와 같이 직접사용
  순수 HTML과 HTML form의 GET과 POST만을 이용해서 설계할 경우 사용되는 개념


//클라이언트에서 서버로 데이터 전송
  1. 정적 데이터 조회
    이미지, 정적 텍스트 문서와 같은 정적 데이터는 쿼리 파라미터 없이 리소스 경로로 조회가능
        request
            GET /static/star.jpg HTTP/1.1
            Host: localhost:8080
              
        response
            HTTP/1.1 200 OK
            Content-Type: image/jpeg
            Content-Length: 34012
              
            lkj123kljoifjgnekvndlgj912jd34jksl98vidghajks;djvkld
            dlkfjls;fj9jdjglodnbkdfj;93hjfkgf31233123

  2. 동적 데이터 조회
    쿼리 파라미터를 기반으로 정렬 필터해서 결과를 동적으로 생성
    주로 검색, 게시판 목록에서 정렬 필터(검색어)를 쿼리 파라미터로 사용해서 데이터 전달
        request
            GET /search?q=star&hl=ko HTTP/1.1
            Host: www.google.com
  
  3. HTML form 데이터 전송
    GET, POST를 이용한 데이터 전송 및 저장
    GET 메서드를 이용하면 메시지 바디를 쿼리파라미터로 HTTP 메시지 작성(조회에만 사용)
        HTTP form
            <form action="/save" method="post">  //GET 메서드 사용시 method="get"
              <input type="text" name="username" />
              <input type="text" name="age" />
              <button type="submit">등록</button>
            </form>
    
        request(POST)
            POST /save HTTP/1.1
            Host: localhost:8080
            Content-Type: application/x-www-form-urlencoded
            
            username=jeonghak&age=26
        
        request(GET)
            GET /save?username=jeonghak&age=26 HTTP/1.1
            Host: localhost:8080
            Content-Type: application/x-www-form-urlencoded
      
    기본적인 쿼리 스트링뿐만 아니라 파일 데이터를 업로드하는 경우
    다른 종류의 여러 파일과 폼의 내용을 함께 전송가능
        multipart/form-data
            <form action="/save" method="post" enctype="multipart/form-data">  
              <input type="text" name="username" />
              <input type="text" name="age" />
              <input type="file" name="file1" />
              <button type="submit">등록</button>
            </form>
        
        request
            POST /save HTTP/1.1
            Host: localhost:8080
            Content-Type: multipart/form-data; boundary=----XXX  //바운더리로 구분
            Content-Length: 10457
            
            ------XXX
            Content-Disposition: form-data; name="username"
            
            jeonghak
            ------XXX
            Content-Disposition: form-data; name="age"
            
            26
            ------XXX
            Content-Disposition: form-data; name="file1"; filename="intro.png"
            Content-Type: image/png
            
            109238a9o0p3eqwokjasd09ou3oirjwoer9u34ouiief...
            ------XXX--

  4. HTTP API 데이터
    서버끼리의 백엔드 시스템 통신(Json 사실상 표준)
    앱 클라이언트
        아이폰, 안드로이드
    웹 클라이언트
        HTML form 전송 대신 자바 스크립트 통신(AJAX)
        React, VueJs 같은 웹 클라이언트와 API 통신
        
        request
            POST /members HTTP/1.1
            Content-Type: application/json
            
            {
                "username":"jeonghak",
                "age":26
            }



