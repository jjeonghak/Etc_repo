//개요
  header-field = field-name ":" OWS field-value OWS
  HTTP 전송에 필요한 모든 부가정보


//RFC2616 분류
  1999년 HTTP 표준
  1. General header : 메시지 전체에 적용되는 정보
      Connection: close
      
  2. Request header : 요청 정보
      User-Agent: Mozilla/5.0 (Macintosh; ..)
      
  3. Responce header : 응답 정보
      Server: Apache
      
  4. Entity header : 엔티티 정보, 메시지 본문(entity body)의 데이터 해석을 위한 정보
      Content-Type: text:html
      Content-Length: 3423
  

//RFC7230 ~ 7235
  엔티티(Entity) -> 표현(Representation)
  표현(representation) = 메타데이터(representationMetadata) + 데이터(representationData)
  메시지 본문(message body, payload)을 통해 표현 데이터 전달
  요청이나 응답에서 전달한 실제 데이터는 표현
  표현 헤더는 표현 데이터를 해석을 위한 정보(표현 메타데이터와 페이로드 메시지 구분해야하지만 생략)


//표현 헤더(Representation)
  표현 헤더는 전송, 응답 둘다 사용
      Content-Type : 표현 데이터의 형식
          text/html; charset=UTF-8, application/json, image/png
          
      Content-Encoding : 표현 데이터의 압축 방식, 압축전송인 경우 사용
          gzip, deflate, identity
          
      Content-Language : 표현 데이터의 자연어
          ko, en, en-US, de
          
      Range/Content-Range : 표현 데이터의 범위 지정, 범위전송인 경우 사용
          request
            Range: bytes=1001-2000  
          response
            Content-Range: bytes 1001-2000 / 2000
            
      Content-Length : 표현 데이터의 길이, 바이트 단위
          Transfer-Encoding(분할전송)인 경우 Content-Langth 사용불가
          
      Transfer-Encoding: 바디를 분할해서 각각의 길이와 메시지를 전송, 분할전송인 경우 사용
          Content-Length 사용불가
          Transfer-Encoding: chunked
          마지막 덩어리(0 CRLF \r\n)로 메시지 바디 끝을 인지


//협상 헤더(Content Negotiation)
  협상 헤더는 요청시에만 사용
  클라이언트가 선호하는 표현 요청
      Accept : 클라이언트가 선호하는 미디어 타입 전달
      Accept-Charset : 클라이언트가 선호하는 문자 인코딩
      Accept-Encoding : 클라이언트가 선호하는 압축 인코딩
      Accept-Language : 클라이언트가 선호하는 자연어
    
  1. q(quality value, 0 <= q <= 1) 값을 사용해서 우선순위 결정, 생략하면 1
      Accept-Language: ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7
      
  2. 구체적으로 기입된 정보가 우선순위 높음
      Accept: text/*, text/plain, text/plain;format=flowed, */*

  3. 구체적인 것을 기준으로 미디어 타입 결정
      text/html;level=1 -> q = 1
      text/html;level=2 -> q = 0.4
      text/html;level=3 -> q = 0.7
      text/html -> q = 0.7
      text/plain -> q = 0.3
      image/jpeg -> q = 0.5

        
//일반 정보
  From : 유저 에이전트 이메일 정보
  Referer : 이전 웹 페이지, 유입 경로 분석가능, referrer 오타표기 그대로 사용
  User-Agent : 유저 에이전트 애플리케이션 정보(웹 브라우저 정보 등)
  Server : 요청을 처리하는 origin 서버(최종적인 서버)의 소프트웨어 정보, 응답에서 
  Data : 메시지가 발생한 날짜와 시간


//특별한 정보
  Host : 요청한 호스트 정보(도메인명), 요청에서 사용하는 필수값
    하나의 서버가 여러 도메인을 처리해야하는 경우 사용(정확한 도메인명을 통해 식별)
    
  Location : 페이지 리다이렉션, 정확한 리소스 경로
      201, 3xx 상태 응답 메시지에 사용
    
  Allow : 허용 가능한 HTTP 메서드
      405 상태 응답 메시지에 사용

  Retry-After : 유저 에이전트가 다음 요청을 하기까지 기다려야 하는 시간(날짜, 초단위)
      503 상태 응답 메시지에 사용


//인증 헤더(Authorization)
  Authorization : 클라이언트 인증 정보를 서버에 전달
  WWW-Authenticate : 리소스 접근시 필요한 인증 방법
      401 상태 응답 메시지에 사용


//쿠키 헤더(Cookie)
  set-Cookie : 서버에서 클라이어트로 쿠키 전달, 응답인 경우 사용
      set-cookie: 생명주기 도메인 경로 보안
  cookie : 클라이언트가 서버에서 받은 쿠키를 저장하고 HTTP 요청시 서버로 전달, 요청인 경우 사용

  쿠키(Cookie)
    사용자 로그인 세션 관리, 광고 정보 트래킹에 사용
    쿠키 정보는 항상 서버에 전송, 네트워크 트래픽 추가 유발
    세션 id와 인증 토큰같은 최소한의 정보만 사용
    서버에 전송하지 않고 웹 스토리지를 통해 웹 브라우저 내부에 데이터 저장
    보안에 민감한 데이터는 저장하면 안됨(주민번호, 카드번호)
  
  생명주기
    세션쿠키 : 만료 날짜를 생략하면 브라우저 종료까지 유지
    영속쿠키 : 만효 날짜를 입력하면 해당 날짜까지 유지  
      만료일이 되면 쿠키삭제, GMT 날짜
          expires=Sat, 11-May-2022 19:43:21 GMT
      0이나 음수 지정시 쿠키 삭제, 초단위
          max-age=3600
  
  도메인
    생략 : 현재 문서 기준 도메인(example.org)만 적용
    명시 : 명시한 문서 기준 도메인과 서브 도메인(dev.example.org) 포함
        domain=example.org

  경로
    경를 포함한 하위 경로 페이지만 쿠키 접근(보통 루트로 지정해서 하위페이지에 쿠키전달)
        path=/home

  보안
      Secure : https인 경우에만 전송
      HttpOnly : XSS 공격 방지를 위한 자바스크립트 접근불가, http 전송에만 사용
      SameSite : XSRF 공격방지, 요청 도메인과 쿠키에 설정된 도메인이 같은 경우만 쿠키 전송


//캐시 헤더(Cache)와 검증 헤더
  동일한 요청에 대해 캐시 유효시간동안 네트워크를 사용하지 않음
  
  캐시 종류
    개인 로컬 : private 캐시
    프록시 캐시서버 : public 캐시 
    원서버 데이터 : origin
  
  캐시 제어
      cache-control  //가장 권장되는 방식
          max-age : 캐시 유효시간, 초단위
          s-maxage : 프록시 캐시 서버에만 적용되는 캐시 유효시간, 초단위
          no-cache : 항상 origin 서버에 검증(조건부 요청)하고 데이터 캐시 사용가능
          no-store : 민감한 정보 포함, 저장하지 않고 메모리에서 사용
          must-revalidate : 캐시 만료후 최초 조회시 origin 서버의 검증, 접근 실패시 504 
          public : 응답이 public 캐시에 저장가능
          private : 응답이 private 캐시에만 저장, default
          
      pragma: no-cache  //HTTP 1.0 하위호환
      expires: Sat, 11 May 2022 19:43:21 GMT  //HTTP 1.0 하위호환
  
  캐시 무효화
    캐시 적용하지 않아도 웹 브라우저마다 임의로 캐시를 하는 경우존재
    절대 캐시가 되면 안되는 경우에는 확실한 캐시 무효화 사용
    
        cache-control: no-cache, no-store, must-revalidate
        pragma: no-cache
    
    클라이언트는 no-cache로 프록시 캐시서버에게 요청, 프록시 캐시서버가 원서버에 요청
    원서버와 프록시 캐시의 연결이 끊어지면 프록시 캐시가 클라이언트에게 200 응답 가능성
    must-revalidate를 통해 프록시 캐시와 원서버 연결이 끊어진 경우 대비
    원서버에 접근할 수 없는 경우 항상 504 오류가 발생
    혹시 모를 HTTP 1.0 요청(과거 웹 브라우저)에도 대비
          
  
//검증 헤더와 조건부 요청 헤더
  캐시 유효시간 초과후 요청한 경우 조건부 요청
  검증 헤더를 통해 데이터의 최종 수정시간 비교
    동일한 경우 304 상태와 함께 메시지 바디없이 응답
    동일하지 않은 경우 200 상태와 함께 모든 데이터로 응답
  클라이언트는 서버가 보낸 응답 헤더 정보로 캐시의 메타 정보 갱신 및 데이터 재활용
  
  조건부 요청 헤더 : 조건부 요청인 경우 사용
      if-modified-since: 캐시 데이터 갱신 시간(GMT), Last-Modeified
      if-none-match : 캐시 데이터 버전이름, ETag
  
  검증 헤더 : 조건부 요청의 응답인 경우 사용
      Last-Modified : 서버 데이터 갱신 시간(GMT), if-modified-since
      ETag : 서버 데이터 버전이름, if-none-match

  Last-Modified
    1초 미만 단위로 캐시 조정 불가능
    날짜 기반의 로직 사용하므로 날짜계산 필요
    데이터를 수정했지만 데이터 결과가 같은 경우 날짜만 변경
    서버에서 별도의 캐시 로직을 관리하고 싶은 경우

  ETag(Entity Tag)
    캐시용 데이터에 임의의 고유한 버전이름 태그
    데이터 변경시 버전이름 변경, hash 다시 생성
    캐시 제어 로직을 서버에서 완전히 관리(hash 함수)



