//어플리케이션 구성
	어플리케이션
	OS: Window/Linux
	Computing: CPU + RAM
	Storage: HDD/SSD
	Network: 랜카드/랜선


//IaaS(Infrastructure as a Service)
	인프라(Computing, Storage, Network)만 제공
	OS를 직접 설치하고 필요한 소프트웨어 개발
	ex) AWS EC2


//PaaS(Platform as a Service)
	인프라 + OS + 기타 프로그램 실행에 필요한 부분(런타임)
	코드만 올리면 어플리케이션 동작 가능
	ex) Firebase, Google App Engine


//SaaS(Software as a Service)
	인프라 + OS + 필요한 소프트웨어 제공
	서비스 자체를 제공
	다른 세팅 없이 서비스만 이용
	ex) Gmail, DropBox, Slack, Google Docs


//클라우드 컴퓨팅 배포 모델
	공개형(클라우드): 모든 부분이 클라우드에서 실행, 낮은 비용과 높은 확장성
	혼합형: 공개형과 폐쇄형의 혼합, 전환하는 과도기에 사용
	폐쇄형: 높은 수준의 커스터마이징, 높은 초기 비용 및 유지보수, 높은 보안


//AWS 구조
	글로벌 서비스: 데이터 및 서비스를 전 세계의 모든 인프라가 공유
		IAM
		Amazon CloudFront(CDN): 엣지 로케이션을 통해 캐싱 및 트래픽 분산
		CloudFront
		WAF
		Route53 
	지역 서비스: 특정 리전을 기반으로 데이터 및 서비스 제공
		Regions: AWS의 서비스가 제공되는 서버의 물리적 위치
		VPC
		S3
		Availability Zone(2개 이상)
			RDS
			EC2


//ARN(Amazon Resource Name): AWS의 모든 리소스의 고유 아이디
	arn:[partition]:[service]:[region]:[account_id]:[resource_type]/resource_name/(qualifier)


//AWS account
	생성시 본인 명의의 카드 필요
	루트 유저와 기본 리소스등이 생성
	숫자 아이디 부여(추후 문자 별칭 지정 가능)


//루트 유저
	생성한 계정의 모든 권한
	생성시 만든 이메일 주소로 로그인
	탈취당했을시 복구가 힘들기 때문에 MFA 설정 필요
	관리용으로만 이용
	AWS API 호출 불가


//IAM 유저
	Identity and Access Management를 통해 생성한 유저
	기본 권한 없음
	AWS API 호출 가능


//가상화(virtualization)
	단일 컴퓨터의 하드웨어 요소를 일반적으로 가상 머신이라고 하는 다수의 가상 컴퓨터로 분할하는 기술
	1세대 완전 가상화(fully emulated): 모든 시스템 요소가 에뮬레이터 안에서 동작
	2세대 Paravirtualization: GuestOS는 하이퍼바이저와 통신
	3세대 Hardware Virtual Machine(HVM): 하드웨어에서 직접 가상화 지원, GuestOS가 하드웨어와 통신


//EC2
	안전하고 크기 조정이 가능한 컴퓨팅 파워를 클라우드에서 제공하는 웹 서비스
	초 단위 온디맨드 가격 모델
	인스턴스 유형과 사이즈를 직접 사용 목적에 따라 최적화 가능


//EBS
	EC2 인스턴스에 사용할 영구 블록 스토리지 볼륨 제공
	가상의 하드드라이브, EC2 인스턴스가 종료되어도 존재(네트워크로 연결)
	하나의 EBS를 여러 EC2에 장착 가능(EBS Multi Attach)


//Snapshot
	특정 시간에 EBS 상태의 저장본
	S3에 보관(증분식 저장, 변화된 값만 저장)


//AMI
	EC2 인스턴스를 실행하기 위해 필요한 정보를 모은 단위
	기존 EC2 인스턴스의 스냅샷을 이용해서 복제가능


//오토스케일링(autoscaling)
	vertical scale(scale up)
		물리적으로 인스턴스 성능을 높임, 성능이 높아질수록 효율이 낮아짐(비용이 기하급수적으로 늘어남)
	horizontal scale(scale out)
		인스턴스 성능이 아닌 규모를 높임, 비용과 성능이 같은 비율로 높아짐
	auto scaling: horizontal scale 모니터링 지원


//Elastic Load Balancer
	들어오는 애플리케이션 트래픽을 여러 대상에 자동으로 분산
	직접 트래픽을 발생시켜(Health Check) 인스턴스가 살아있는지 체크
	오토스케일링과 연동가능, 여러 가용영역에 분산가능
	application load balancer
	network load balancer
	classic load balancer
	gateway load balancer


//EFS
	NFS(Network File System) 기반 공유 스토리지 서비스(NFSv4)
	EBS와는 다르게 용량 지정할 필요 없음
	AWS 외부에서 접속 불가
	리눅스만 사용가능
	다수의 ec2 인스턴스 연결 가능
	보안 그룹을 통해 인스턴스에 연결
	수명주기 관리 정책 또는 지능형 계층화를 통해 클래스 자동 전환가능
	스토리지 클래스
		표준 스토리지: 3개의 가용영역에 데이터 저장, 자주 엑세스하는 데이터 저장용
		표준 IA: 3개의 가용영역에 데이터 저장, 자주 엑세스하지 않는 데이터 저장용
		One zone: 1개의 가용영역에 데이터 저장, 자주 엑세스하는 데이터 저장용
		One zone IA: 1개의 가용영역에 데이터 저장, 자주 엑세스하지 않는 데이터 저장용
	성능 모드: I/O, 읽기 쓰기 속도
		기본 범용 성능 모드
		최대 I/O 성능 모드
	처리량 모드: 파일 시스템 처리량
		기본 버스팅 처리량 모드: 파일 용량에 따라 자동 확장
		프로비저닝 모드: 고정으로 처리량 지정


//데이터 저장 방식
	오브젝트 스토리지: 오브젝트라는 개별 유닛에 데이터 저장
		각 유닛에 고유의 식별자 존재, 분산 시스템으로 탐색 가능
	블록 스토리지: 데이터를 고정된 사이즈의 블록으로 식별자와 함께 저장
	파일 스토리지: 데이터는 계층적 파일 디렉토리 내 폴더에 저장
		해당 데이터의 경로를 알아야 엑세스 가능


//S3(Simple Storage Service)
	객체 스토리지 서비스, 파일 보관만 가능
	글로벌 서비스지만 데이터는 리전에 저장
	버킷
		S3의 저장공간을 구분하는 단위(디렉토리와 같은 개념)
		버킷 이름은 전 세계에서 고유한 값


//S3 객체 구성
	owner: 소유자
	key: 파일 이름
	value: 파일 데이터
	verion id: 파일 버전 아이디
	metadata: 파일 정보를 담은 데이터
	ACL: 파일 권한을 담은 데이터
	torrents: 토렌트 공유를 위한 데이터


//S3 버전 관리
	객체가 여러 버전을 가질 수 있음
	동일한 이름으로 업로드시 여러 버전으로 저장
	MFA delete 옵션으로 실수로 객체를 삭제하는 것 방지


//S3 객체 암호화
	클라이언트가 SSL/TLS 암호화를 통해 서버에 데이터 저장
	서버 측 암호화(SSE): 데이터가 서버에 저장되기 전에 객체 암호화
		SSE-S3: S3에서 관리하는 암호화
		SSE-KMS: KMS에서 관리하는 암호화, 키 자동 교체 및 감시 가능
		SSE-C: 고객이 관리하는 암호화, 데이터 전송시 반드시 https 사용
	클라이언트 측 암호화: 데이터 전송전 암호화
	전송 중 암호화: SSL/TLS를 사용해 데이터 암호화, https 사용


//S3 버킷 정책
	버킷 정책: JSON 형식의 버킷 엑세스 제어 정책
	퍼블릭 엑세스 차단: 버킷과 객체에 대한 퍼블릭 엑세스 관리
	ACL: AWS 계정에 버킷이나 객체에 읽기/쓰기 권한 부여 기능


//CORS(Cross-Origin Resource Sharing)
	origin = s3 버킷 주소
	다른 오리진에 버킷에 대한 엑세스 공유
	CORS 헤더 사용


//엑세스 로깅
	S3 버킷의 모든 활동을 파일로 만들어 S3 버킷에 저장하는 기능
	감사 목적으로 활용 가능
	로그 분석을 위한 분석 도구 존재(Amazon Athena)
	절대로 로그 파일을 같은 버킷에 저장 금지(무한 루프)


//S3 복제 규칙(replication)
	S3 버킷 간에 객체를 자동으로 복제하는 기능
	버킷 복제를 위해 원본과 대상 버킷 모두 버전관리 활성화 필수
	다른 AWS 계정의 버킷으로 복제 가능
	교차 리전 복제(CRR): 서로 다른 리전의 S3 버킷으로 객체 복사
		지리적으로 가까운 엑세스가 필요한 경우, 재해복구
	동일 리전 복제(SRR): 같은 리전의 S3 버킷으로 객체 복사
		동일한 데이터를 사용하는 프로덕션과 테스트 계정 간의 복사
		법적 준수사항으로 같은 리전에 데이터 복사본


//S3 스토리지 클래스
	S3 스탠다드
		최소 3개 이상의 가용영역 분산 보관
		최소 보관 기간 및 용량 없음
		파일 요청 비용 없음(전송 요금은 발생)
	S3 스탠다드 IA(Infrequently Accessed)
		자주 사용되지 않는 데이터를 저렴한 가격에 보관
		최소 3개 이상의 가용영역 분산 보관
		최소 저장 용량 존재(128kb)
		최소 저장 기간(30일)
		데이터 요청 비용 발생
	S3 One Zone-IA
		자주 사용되지 않고 중요하지 않은 데이터를 저렴한 가격에 보관
		단 한개의 가용영역에만 보관
		최소 저장 용량 존재(128kb)
		최소 저장 기간(30일)
		데이터 요청 비용 발생
	S3 Glacier Instant Retrieval
		아카이브용 저장소
		최소 저장 용량 존재(128kb)
		최소 저장 기간(90일)
		바로 엑세스 가능
	S3 Glacier Flexible Retrieval
		아카이브 저장소
		최소 저장 용량 존재(40kb)
		최소 저장 기간(90일)
		분 ~ 시간 단위 이후 엑세스 가능
	S3 Glacier Deep Archive
		아카이브 저장소
		최소 저장 용량 존재(40kb)
		최소 저장 기간(180일)
		12 ~ 48시간 이후 엑세스 가능
	S3 Intelligent-Tiering
		머신 러닝을 사용해  자동으로 적절한 클래스 변경
		퍼포먼스 손해/오버헤드 없이 요금 최적화


//객체 수명주기 관리(lifecycle policy)
	객체가 저장되어 삭제될 때까지 수명주기를 비용효율적으로 저장되도록 관리
	버전 관리가 활성화된 경우 객체의 버전별로 수명주기정책 적용 가능
	Amazon S3 Analytics: 데이터 엑세스 패턴을 분석


//S3 Glacier Vault Lock
	아카이브 데이터를 저장하는 컨테이너
	파일을 저장후 삭제, 편집을 못하도록 정책으로 잠금
	write once read many(WORM) 모델 적용
	데이터 보관 규정 준수 정책이 있는 경우 사용


//S3 Object Lock
	일정시간 또는 무기한으로 객체가 삭제되거나 덮어쓰이지 않도록 관리
	버전관리 활성화 필수
	write once read many(WORM) 모델 적용
	거버넌스 모드: 필요에 따라 일부 사용자에게 변경하거나 객체를 삭제할 권한 부여
	규정준수 모드: aws 계정의 루트 사용자를 포함해서 덮어쓰거나 삭제할 수 없음
	법적 보존(legal hold): IAM 정책에 s3 PutObjectLegalHold 권한으로 객체 수정가능


//S3 기타 기능
	이벤트 알림: s3의 이벤트 발생시 알림 기능
	S3 Select: sql 구문을 이용해 데이터 필터링
	요청자 지불 버킷: 버킷 소유자가 아닌 요청자가 지불 기능
	미리 서명된 url(pre-signed url): 제한된 시간동안 객체를 공유
	전송 가속화: AWS 엣지로케이션을 이용해 사용자와 가까운 곳에 데이터 캐싱
	멀티 파트 업로드: 대용량의 파일을 분할하여 병렬로 업로드
	AWS Transfern SFTP: 보안 파일 전송 프로토콜
	S3 Access Point: 특정한 그룹이 허용된 데이터만 엑세스 가능
	S3 Object Lamda: AWS Lamda 함수를 사용해 데이터를 수정
	S3 Batch Operation: 단일 요청으로 많은 데이터를 처리


//Instance Store
	ec2 인스턴스에 붙는 임시 저장소
	ec2 인스턴스 종료시 초기화되는 휘발성 저장소


//스토리지 비교
	Instance Store: 특정 인스턴스에 붙는 물리적 고성능 스토리지
		임시 용도의 휘발성 저장소
	EBS: 인스턴스 생성시 AMI가 설치되는 EBS 루트 볼륨 생성
		여러 EBS 볼륨으로 하나의 인스턴스 연결 가능
		동일한 가용영역에 있는 인스턴스만 연결 가능
		스냅샷을 이용한 복사 가능
		여러 인스턴스에 연결 가능하지만 제한사항 존재(같은 가용영역)
	EFS: NFS 프로토콜을 이용한 리눅스 네트워크 파일 스토리지
		여러 가용영역에 있는 여러 인스턴스를 하나의 EFS에 연결 가능
		온-프레미스 리눅스 서버에서도 연결 가능
		클래스, 성능, 처리량 모드 설정 가능


//Storage Gateway
	온-프레미스 데이터 센터의 데이터와 AWS 클라우드의 스토리지 연결 서비스
	AWS Direct Connect, Internet 두가지 방식 존재
	하이브리드 클라우드 스토리지로 불림
	데이터를 실기간으로 전송 및 저장 가능
	온-프레미스 로컬 캐시 가능
	파일 백업, 클라우드 파일 저장소, 재해복구 저장소
	S3 파일게이트웨이
		파일 단위로 전송
		NFS, SMB 프로토콜 사용
		Active Directory 서비스와 통합하여 인증된 사용자 엑세스 가능
	FSx 파일게이트웨이
		Amazon FSx for Window File Server 파일 단위
		SMB 프로토콜 사용
	볼륨게이트웨이
		iSCSI 연결을 통한 블록 스토리지 제공
		캐싱볼륨: 기본데이터는 S3에 저장, 자주 엑세스하는 데이터는 로컬 캐싱
		저장볼륨: 모든 데이터를 S3에 저장
	테이프게이트웨이
		테이프 백업 어플리케이션과 S3 간의 전송
		테이프 백업 장치 구성을 변경하지 않고 AWS S3로 백업 가능


//Storage Gatewayu 하드웨어 어플라이언스
	스토리지 게이트 웨이 운영을 위해선 온프레미스 서버에 Storage Gateway 어플리케이션 설치 필수
	인프라가 부족한 경우 미리 설피된 하드웨어 어플라이언스 구매 운용 가능


//FSx for Lustre
	리눅스 환경을 위한 고성능 병렬 스토리지 시스템
	스크래치 파일 시스템
		임시 스토리지 및 단기 데이터 처리용
		데이터 복제되지 않음
		파일 서버 장애 발생시에도 교체되지 않음
	지속적 파일 시스템
		장기 스토리지 및 워크로드용
		데이터가 여러 가용영역에 자동으로 복제
		파일 서버 장애 발생시 교체


//FSx for Window File Server
	윈도우 서버에 구축되는 파일 공유 서비스
	SMB 프로토콜 사용(윈도우, 리눅스에서 엑세스 가능)


//Snow Family
	데이터를 네트워크가 아닌 물리적인 장치에 저장하여 전송가능한 디바이스
	온프레미스 데이터를 AWS로 마이그레이션하는 경우 사용
	마이그레이션에 대해 여러 제약 조건이 존재하는 경우 사용
	AWS Snowcone
		8TB 스토리지로 가장 작은 디바이스
		오프라인 데이터 전송 또는 AWS DataSync를 통한 온라인 전송 가능
	AWS Snowball
		데이터 마이그레이션 및 엣지컴퓨팅 디바이스
		Snowball Edge Storage Optimized: vCPU 40개, 80TB
		Snowball Edge Compute Optimized: vCPU 52개, 42TB, GPU(선택 사항)
	AWS Snowmobile
		45피트 운반 컨테이너로 최대 100PB 전송
		멀티 페타바이트 또는 엑사바이트급 디지털 미디어 마이그레이션 및 데이터 센터 종료시 적합


//AWS DataSync
	온-프레미스와 AWS, AWS 스토리지 서비스 간 데이터 전송 및 복제 자동화 서비스
	SMB, NFS 프로토콜을 사용하는 온프레미스 서버의 파일을 AWS 서비스로 전송
	전송 중이나 종료 후 데이터 무결성 확인 및 암호화 가능


//데이터 서비스 비교
	DataSync vs. Snowball Edge
		DataSync: 온라인으로 데이터 전송
		Snowball Edge: 오프라인 데이터 전송, 전송대역폭 제한 및 연결이 불안한 경우
	DataSync vs. Storage Gateway
		DataSync: 초기 데이터를 S3로 마이그레이션
		Storage Gateway: 초기 마이그레이션 이후 파일 게이트웨이 구성(지속적인 엑세스 유지)
	DataSync vs. Transfer Acceleration
		Transfer Acceleration: 대용량 파일 전송		
	DataSync vs. Transfer Family
		DataSync: 데이터 전송 가속화 및 자동화
		Transfer Family: SFTP, FTPS 및 FTP 프로토콜을 이용한 전송


//AWS Backup
	중앙 집중식 백업 관리 서비스
	백업 일정관리, 보존관리, 모니터링, 수명주기관리 등
	교차리전 백업, 교차계정 백업 지원
	리소스 태그 기반 백업 정책 구성 가능
	백업대상
		Amazon FSx
		Amazon EFS
		Amazon DynamoDB
		Amazon EC2
		Amazon EBS
		Amazon RDS
		Amazon Aurora
		AWS Storage Gateway
		VMware 가상머신


//CloudFront
	콘텐츠 전송 네트워크 서비스(CDN)
	엣지 로케이션 콘텐츠 캐싱을 이용해 빠르게 컨텐츠 배포
	엣지 로케이션은 데이터를 임시 저장할 수 있는 캐싱 기능
	오리진의 데이터를 엣지 로케이션으로 캐싱
	글로벌 배포
	오리진에서 엣지 로케이션으로 전송되는 비용 부과되지 않음
	비용 절약을 위한 엣지 로케이션 수 관리 가능
		전체 가격 등급: 모든 리전에 배포
		가격 등급 200: 대부분의 리전에 배포
		가격 등급 100: 일부 리전에 배포
	Origin group
		오리진 장애 조치
		기본 오리진 장애시 자동으로 보조 오리진으로 전환
	Lamda@Edge
		CloudFront 전달된 콘텐츠를 사용자 지정 함수 실행 기능


//CloudFront 보안 엑세스
	뷰어/오리진 프로토콜 정책
		뷰어 프로토콜과 오리진 프로토콜을 통한 보안 정책
	OAI(Origin Access Identity)
		뷰어는 바로 S3 버킷에 엑세스 불가, 엣지 로케이션을 통해서만
	Singed URL, Cookies
		서명된 url과 쿠키를 이용해 콘텐츠 접근
		서명된 url은 하나의 파일에만 유효
		서명된 쿠키는 여러 파일에 유효
	지역 제한
		특정 국가에서의 콘텐츠 엑세스 제한
		법률적인 사항으로 국가별 저작권이 다른 경우
		화이트 리스트: 리스트 내의 국가만 엑세스 허용
		블랙 리스트: 리스트 내의 국가만 엑세스 거부
	AWS Web Application Firewall(WAF), AWS Shield와 결합해 DDos 방어 가능
	필드 레벨 암호화
		민감한 데이터를 안전하게 오리진 서버로 업로드하는 기능
		put/post 요청이 오리진으로 전달되기 전 엣지 로케이션에서 비대칭 암호화 키 적용


//Global Accelerator
	가장 가까운 위치로 트래픽을 라우팅하는 기능
	일반적으로 지리가 먼 사용자는 많은 인터넷 라우팅을 거침
	엣지 로케이션과 AWS 전용네트워크를 통해 지리적으로 먼 사용자에게 빠르게 라우팅
	2개의 Anycast 퍼블릭 고정 ip 생성
		Anycast: 네트워크 트래픽을 가장 가까운 노드로 전송하는 라우팅 방식
	Health Check 기능을 통해 하나의 서버 장애 발생시 다른 서버로 라우팅 가능


//엣지 로케이션 서비스 비교
	CloudFront
		동적인 ip 주소 사용
		콘텐츠 캐싱을 위해 엣지 로케이션 사용
		Http 프로토콜 처리에 적합
		캐시 가능한 동적 콘텐츠 성능 개선
	Global Accelerator
		고정된 ip 주소 사용
		가장 가까운 리전의 엔드포인트로 최적화된 경로를 탐색하는데 엣지 로케이션 사용
		TCP, UDP 프로토콜 처리에 적합
		TCP, UDP를 사용하는 광범위한 애플리케이션 성능 개선


 //RDS
 	관계형 데이터 베이스 서비스
 		Aurora
 		PostgreSQL
 		MySQL
 		MariaDB
 		Oracle
 		SQL Server
 	DB 다운타임 없이 스토리지 용량만큼 자동 확장 가능
 	범용 SSD 스토리지: 일반적인 용도
 	프로비저닝된 IOPS SSD 스토리지: 빠른 I/O 필요한 경우
 	마그네틱 스토리지: 엑세스 빈도가 낮은 경우


//RDS 백업
	복구 작업을 수행하면 새로운 엔드포인트를 가지는 인스턴스 생성
	기존 인스턴스는 그대로 유지(필요없는 경우 삭제 가능)
	S3에 백업 내용 저장
	자동백업
		백업 수행 기간 설정
		백업 보존 기간은 1 ~ 35일 설정 가능
		특정 시점으로 복구 가능(point in time recovery)
		5분마다 백업, 오래된 시점부터 5분전까지 시점으로 복구 가능
		비활성화는 보존기간을 0으로 설정
	스냅샷
		사용자가 수동으로 스냅샷 생성 가능
		사용자가 지정한 만큼 백업 보존 가능


//RDS 보안
	SSL/TLS
	AWS Key Management Service


//Read Replica
	읽기만 가능한 DB 인스턴스의 복제본을 여러개 만드는 기능
	원본 DB 읽기/쓰기 트래픽을 분산시켜 성능 향상
	백업이 활성화된 상태로 유지해야 읽기 전용 복제본 사용 가능
	활성 상태의 장기 실행 트랜잭션이 있는 경우 완료후 읽기 전용 복제본 생성 권장


//Multi-AZ
	데이터 베이스를 여러 가용영역에 배치
	원본 DB 장애시 예비 복제본으로 자동 연결(Standby Replica)
	두 인스턴스에 대한 업데이트는 동기식으로 복제
	읽기 트래픽 분산 용도가 아닌 재해 복구 용도


//RDS Custom
	EC2에 RDS를 설치하여 구성하는 경우 사용자가 서버의 모든 부분을 관리
	RDS는 AWS에서 데이터베이스와 운영체제를 모든 부분 관리하는 완전관리형 서비스
	사용자가 데이터베이스와 운영체제에 대한 관리 권한을 가짐


//RDS Proxy
	데이터베이스 프록시 기능
	어플리케이션과 데이터베이스 사이에 연결 풀링하고 공류하도록 하는 기능
	여러 어플리케이션이 데이터베이스 연결을 공유할 수 있어서 리소스 효율적 사용 가능
	데이터베이스 장애 조치 시간 감소
	보안 개선(AWS IAM, Secrets Manager 보안 인증 정보를 저장가능)
	데이터베이스 성능 유지


//Aurora
	RDS 호환형 관계형 데이터베이스
	AWS에서 만든 서비스로 저렴한 비용에 성능이 좋음
	데이터베이스 설정, 패치 적용 및 백업과 같은 관리 테스크 자동화
	개별 인스턴스 기반이 아닌 여러 인스턴스를 하나로 운영하는 클러스터 기반
	DB 인스턴스
		읽기/쓰기 인스턴스와 읽기 Aurora 복제본으로 구성
	Aurora DB 클러스터
		하나 이산의 DB 인스턴스와 데이터를 관리하는 클러스터 볼륨으로 구성
		기본 DB 인스턴스에 더해 최대 15개까지 Aurora 복제본으로 구성
	Aurora Replica
		3개의 가용영역에 6개의 데이터 사본을 자동으로 복제
		마스터 DB 장애 발생시 최대 30초 내에 복제본 중 하나가 기본 인스턴스로 변경
	글로벌 데이터베이스
		다른 리전으로 데이터베이스 복제하는 기능
		1초 미만의 대기시간으로 최대 5개의 보조 리전에 복제
		보조 리전 중 하나가 1분 이내에 읽기/쓰기 기능으로 승격 가능
	Database Cloning
		현재 Aurora DB 클러스터를 복제하여 원본과 동일 데이터를 갖는 새 클러스터 생성 기능
		스냅샷보다 빠르고 비용 효율적
		production DB 클러스터에 영향없이 테스트 용 Staging DB 클러스터 생성 가능
	Machine Learning
		Amazon SageMaker, Amazon Comprehend 서비스와 통합하여 사용 가능
	Multi-Master 클러스터
		모든 DB 인스턴스가 쓰기 작업 수행
		라이터 DB 인스턴스 장애시 장애조치할 필요없음
	Aurora Serverless
		DB 인스턴스 운영 및 데이터베이스 용량을 수동으로 관리하지 않음
		특정 DB 인스턴스 유형을 선택하지 않음
		사용한 만큼만 DB 용량을 초당 요금으로 지불
		DB 사용빈도가 낮은 어플리케이션에 효과적


//ElastiCache
	인메모리 데이터 스토어
	빠른 응답시간 제공
	기존 DB와 연결해서 DB 응답성능 개선(데이터 캐싱)
	어플리케이션 코드 변경 필요
	내구성이 필요하지 않는 기본 데이터 스토어로 사용
	오픈소스 인메모리 데이터베이스 솔루션 지원(Redis, Memcached)
		Redis: 싱글 쓰레드 지원, 스냅샷 백업, 복제기능, 고가용성 제공
		Memcached: 멀티 쓰레드 지원


//읽기 전용 비교
	RDS Read Replica
		데이터베이스에 영구적인 데이터 저장
		데이터가 계속 변경되는 쿼리의 읽기 성능 향상에 적합(지속적으로 원본과 동기화)
	ElastiCache
		인 메모리 캐싱(RAM과 같이 빠른 하드웨어에 일시적 저장)
		지연시간을 줄이는 목적으로 사용
		속도는 빠르지만 저장할 수 있는 공간 제약
		변경이 없는 동일한 데이터를 계속 읽기 성능 향상에 적합


//DynamoDB
	NoSQL 데이터베이스 서비스
	key-value 데이터 모델 지원
	서버리스 서비스
	용량에 맞게 자동으로 확장 및 축소
	초당 수백만개 이상의 요청 처리 가능
	지연시간이 짧고 빠른 응답이 필요한 어플리케이션에 사용
	백업 및 복구
		온디맨드 백업을 생성하고 특정 시점으로 복구 가능
		Ponint-in-time recovery 기능을 이용한 최근 35일 이내 시점으로 복구 가능
	테이블 클래스
		DynamoDB Standard: 기본형으로 대부분의 워크로드에 권장
		DynamoDB Standard-IA: 자주 엑세스하지 않는 데이터 저장시 사용
	읽기/쓰기 용량모드
		온디맨드 모드: 초당 읽기/쓰기 처리량을 자동으로 조정(트래픽 예측 불가한 경우)
		프로비전드 모드: 읽기/쓰기 횟수를 수동으로 조정(트래픽 예측 가능한 경우)
	Accelerator(DAX)
		데이터베이스 전에 인메모리 캐시를 사용
	TTL(time to live)
		항목별 타임스탬프 정의해서 항목 삭제
	글로벌 테이블
		리전간에 데이터베이스를 복제하는 기능
		모든 리전에서 읽기/쓰기 가능
		사용자에 가까운 리전의 DB 사용으로 더욱 빠른 성능 지원
	Streams
		DB 테이블에 저장된 항목에 변경이 발생하는 경우 변경 사항을 캡처하는 기능
	읽기 일관성
		최종적 일관된 읽기: default, 읽기 처리량 최대화(최근 변경 반영하지 못할 가능성 존재)
		강력한 일관된 읽기: 성공적인 응답을 수신한 모든 변경 반영, 읽기 지연시간 존재
	S3 연동
		내보내기
			데이터를 S3 버킷으로 보내는 기능
			자동 백업인 특정 시점 복구 기간내의 데이터만 가능
			PIPT 활성화 필수
			DynamoDB Json, Amazon Ion 텍스트 형식만 가능
			테이블 읽기 용량을 사용하지 않고 성능에 영향을 주지 않음
			다른 리전으로 보내기 가능
		가져오기
			S3 데이터를 가져오는 기능
			CSV, DynamoDB Json, Amazon Ion 텍스트 형식만 가능



//Databases
	Amazon documentDB: MongoDB 호환
	Amazon Keyspaces: Apache Cassandra 호환
	Amazon Neptune: 그래프 데이터베이스 서비스
	Amazon Quantum Ledger Database: 원장 데이터베이스 서비스
	Amazon Timestream: 시계열 데이터베이스 서비스


//Database Migration Service(DMS)
	데이터 베이스를 마이그레이션 하는 서비스(DB -> DB)
	온-프레미스에서 AWS, AWS 내에서 마이그레이션 가능
	원본 DB를 사용하는 중에도 지속적으로 마이그레이션 가능
	같은 종류 및 서로 다른 종류 DB도 마이그레이션 가능
	Schema Conversion Tool(SCT)를 이용해 데이터 스키마를 변환
	같은 종류의 DB는 데이터 스키마 변환 필요 없음


//데이터 분석 서비스
	Amazon Athena
		표준 SQL 사용, S3 내의 데이터 분석 쿼리 서비스
		데이터 로드 필요없이 S3 데이터를 직접 사용
		CSV, JSON, ORC, Avro, Parquet 데이터 형식 지원
		연합 쿼리를 통해 여러 데이터 원본에 저장된 데이터에 SQL 쿼리 가능
		Amazon QuickSight와 통합하여 쿼리된 데이터 시각화 가능
	Amazon Redshit
		데이터 웨어하우스 서비스
		데이터 웨어하우스는 의사 결정을 위한 정보의 집합
		여러 소스로부터 구조화 또는 반구조화된 대량의 데이터를 통합하여 분석가능
	Amazon OpenSearch Service
		ElasticSearch에서 파생된 오픈소스 분산 검색 및 분석 서비스
		로그 분석, 실시간 어플리케이션 모니터링
		다양한 소스에서 스트리밍 데이터를 도메인으로 로드
	AWS QuickSight
		클라우드 기반의 비즈니스 인텔리전스 도구
		대시보드, 그래프 등의 시각화를 통한 데이터 분석 서비스
		여러 데이터 소스와 연결 가능
	AWS Glue
		데이터 분석을 위한 ETL(Extract, Transform and Load, 추출, 변환, 로드) 서비스
		다양한 소스에서 데이터 추출, 강화, 정리, 정규화, 결합, 로드 등
	AWS Lake Formation
		데이터 레이크 서비스
		데이터 레이크는 구조화 또는 구조화되지 않은 대량의 데이터를 저장하는 중앙 집중식 저장소
	Amazon EMR(Elastic MapReduce)
		클라우드 빅데이터 플랫폼
		MapReduce는 분산 병렬처리 컴퓨팅 모델 이름
		EMR은 빅데이터 플랫폼인 Hadoop 클러스터를 생성하는 서비스
		오픈소스 프레임워크 사용
		데이터 처리를 위한 클러스터를 자동으로 구성 및 확장 가능
		머신 러닝, 빅데이터 처리 등에 사용


//SQS(Simple Queue Service)
	메시지 대기 서비스
	어플리케이션 간의 느슨한 결합 제공
	Poll 방식으로 메시지 전송
	Consumer가 메시지를 소비하면 SQS Queue에서 메시지 삭제
	표준대기열
		순서와 상관없이 메시지 전달
		처리 순서와 상관없는 어플리케이션에 사용
		가끔 중복 메시지 복사본 전달
	FIFO 대기열
		메시지가 들어온 순서로 처리
		중복 메시지 복사본 없음
		처리 순서가 중요한 어플리케이션에 사용
	배달 못한 편지 대기열(DLQ, Dead Letter Queue)
		일반적으로 메시지는 처리될 때까지 계속 보냄
		이 경우 다른 메시지처리까지 영향
		일정 횟수 이상 시도 후 처리되지 못한 경우 DLQ로 이동 보관
	제한 시간 초과/표시 제한 시간(Visibility Timeout)
		메시지 소비자가 대기열에 메시지 수신 후 처리하면 메시지는 계속 대기열에 존재
		소비자가 메시지 처리 후 대기열에 응답을 해야 메시지 삭제
		소비자가 메시지 수신 후 응답 대기하는 동안 다른 메시지 소비자에게 숨김
		default 30초, 최소 0초, 최대 12시간
	short polling
		default
		메시지 대기열이 비어있어도 소비자는 메시지 요청
		메시지 수신 대기시간 0초
	long polling
		메시지가 대기열에 도착할 때까지 소비자가 메시지 요청 대기
		메시지 수신 대기시간은 1초부터 20초까지 설정 가능


//SNS(Amazon Simple Notification Service)
	메시지 전송 서비스
	게시자(Publishers)에서 구독자(Subscriber)로 메시지 전송
	어플리케이션 간(A2A) 및 어플리케이션과 사용자 간(A2P) 통신
	push 방식의 메시지 전송(게시자의 일방적 전송)
	전송순서
		1. SNS 주제(Topic) 생성
		2. 구독(메시지 수신자) 생성
		3. 메시지 생성
		4. 메시지 전송
	SNS + SQS Fan Out
		어플리케이션 정기적 업데이트 또는 폴링 없이 푸시 메커니즘으로 다수의 구독자에게 메시지 전송
		SQS 분산 어플리케이션에서 송신 구성과 수신 구성 요소를 분리
	SNS FIFO Topic
		메시지가 주제에 게시된 정확한 순서로 구독된 대기열에 메시지 전달


//Kinesis
	실시간 스트리밍 데이터를 수집, 처리 및 분석하는 서비스
	데이터 수집 후 처리가 아닌 데이터 수신되는 대로 처리 및 분석
	서비스 유형
		Kinesis Data Streams
			데이터 스트림 수집, 저장 및 처리
			실시간 서비스
		Kinesis Data Firehose
			스트리밍 ETL(Extract, Transform, and Load) 솔루션
			데이터 스트림 AWS 데이터 스토어에 로드
			데이터를 저장하진 않음
		Kinesis Data Analytics
			SQL 또는 Apache Flink로 데이터 스트림 분석
			Apache Flink는 데이터 스트림 처리를 위한 오픈 소스 프레임워크 및 엔진
		Kinesis Video Streams
			비디오 스트림 수집, 저장 및 처리


//Amazon MQ
	Apache ActiveMQ 및 RabbitMQ 관리형 메시지 브로커 서비스
	JMS, NMS 같은 API와 AMQP, STOMP, MQTT, WebSocket 등 메시징 프로토콜 지원
	활성(Active)/대기(Standby) 브로커 배포모드 지원
	클라우드 기반 어플리케이션은 SNS, SQS 메시지 서비스 사용 추천
	기존 Apache ActiveMQ 및 RabbitMQ 등의 어플리케이션 온프레미스인 경우 마이그레이션을 위해 사용


//API Gateway
	개발자가 API 생성, 게시, 유지 관리, 모니터링 및 보안 유지를 위한 서비스


//AWS Step Functions
	시각적 워크플로 구축 서비스
	어플리케이션의 구성 요소를 단계별로 배열하여 다단계 어플리케이션 구축 및 실행
	사용 예
		데이터 처리: 데이터를 통일된 보고서로 통합, 분석 및 기계 학습 워크플로 조정
		DevOps 및 IT 자동화: 지속적 통합 및 지속적 배포를 위한 도구 구축
		전자 상거래: 주문 처리, 재고 추적 등 프로세스 자동화
		웹 어플리케이션: 강력한 사용자 등록 프로세스와 로그인 인증 구현


//Amazon AppFlow
	SaaS(Software-as-a-Service) 어플리케이션과 AWS 간 데이터 전송 서비스
	통신을 위한 API 커넥터 구축 및 관리할 필요없음
	소스: Slack 같은 서비스형 소프트웨어(SaaS) 어플리케이션
	대상: Amazon S3 및 Amazon Redshift 같은 AWS 서비스


//AWS Cognito
	어플리케이션에 대한 로그인 및 인증 제공하는 기능
	웹과 모바일 앱에 가입 및 로그인 엑세스 제어 기능
	애플, 구글, 페이스북 등 계정과 통합 가능
	사용자풀(User Pool): 사용자 계정정보가 있는 장소
	자격증명풀(Identity Pool): 엑세스 권한 정보가 있는 장소


//AWS Single Sign On(SSO)
	중앙에서 관리하는 하나의 계정으로 여러 어플리케이션에 로그인하는 기능
	AWS Organization, Active Directory, SAML 2.0과 통합 가능
	SAML은 인증을 지원하기 위한 표준 데이터 포멧


//KMS(Key Management Service)
	암호화 키 생성 및 관리하는 서비스
	AWS 서비스 데이터 암호화에 KMS 사용
	키 자동교체하는 기능 지원
	감사를 위한 AWS CloudTrail과 통합하여 모든 키 사용 로그 제공
	키 종류
		고객 관리형 키(Customer managed keys)
			사용자가 생성 및 소유 관리하는 AWS 계정의 KMS 키
			키 정책, IAM 정책 및 권한 부여, 암호화 구성 요소 등의 제어 권한 가짐
		AWS 관리형 키(AWS managed keys)
			사용자 대신 AWS 서비스가 생성 및 소유 관리하는 KMS 키
			키 정책, 키 삭제 등의 제어 권한이 없거나 제한 존재
		AWS 키(AWS owned keys)
			AWS 서비스가 여러 AWS 계정에 사용하기 위해 소유 관리하는 KMS 키 모음


//CloudHSM
	KMS는 AWS에서 관리하는 소프트웨어 방식의 암호화
	CloudHSM은 AWS에서 제공하는 하드웨어 암호화 장비를 통한 하드웨어 방식의 암호화
	사용자가 직접 키 관리
	고객 제공 키(SSH-C, Customer Provided Keys)에 적합한 방식


//KMS Multi-Region Keys
	여러 리전에 동일한 키를 가지고 관리
	동일한 키를 사용하므로 다른 리전의 데이터를 서로 다른 키로 다시 암호화할 필요없음
	Amazon DynamoDB 글로벌 테이블 및 DynamoDB 암호화, 멀티 리전 복제된 S3 버킷 암호화에 사용


//Secrets Manager
	보안정보(자격증명)를 중앙 집중식으로 저장, 검색, 엑세스 제어, 교체, 감사 및 모니터링하는 서비스
	보안정보 유지 방법
		사용자가 소유하고 KMS 저장된 암호화 키를 사용하여 암호화
		사용자는 IAM 정책을 사용하여 보안 정보에 대한 엑세스 제어
		사용자가 보안정보 검색시 Secrets Manager가 해당 정보 복호화 및 TLS 통신으로 로컬에 전송
	보안정보를 자동으로 교체 및 관리 가능
		데이터베이스와 기본적으로 통합
		Lambda 코드와 통합하여 30, 60, 90일 등의 자동 교체 날짜 지정 가능


//ACM(AWS Certificate Manager)
	SSL/TLS 인증서를 중앙에서 관리하는 서비스
	공인 및 사설 SSL/TLS 인증서를 관리 및 배포하는 기능
	SSL/TLS 인증서는 ACM에서 자동으로 갱신


//Shield
	AWS 웹 어플리케이션을 DDoS 공격으로부터 보호
	Shield 유형
		Shield Standard: 기본적으로 적용되는 무료 서비스
		Shield Adbvanced: 더 많은 보호를 제공하는 유료 서비스


//WAF(Web Application Firewall)
	웹 어플리케이션을 보호하는 방화벽
	HTTP OSI 7계층에서 동작
	Load Balancer, API Gateway, CloudFront 적용 가능
	Web ACL(Access Control List) 정의 가능
		악성 IP 주소 차단
		특정 국가 엑세스 제어
		SQL Injection, Cross-Site-Scripting(XSS) 방어
		속도기반규칙(Rate-based rules)으로 DDoS 공격방어


//AWS Firewall Manager
	AWS 조직의 여러 계정과 어플리케이션의 방화벽 규칙을 중앙에서 구성 및 관리 서비스


//GuardDuty
	AWS 계정 및 워크로드에서 악의적 활동을 모니터링하는 위협 탐지 서비스
	공격자 정찰, 인스턴스 침해, 계정 침해 등에 대한 광범위한 보호 제공
	보안 탐지 결과를 전달하여 조치하도록 알림


//Amazon Macie
	데이터 보안 및 데이터 프라이버시 서비스
	민감한 데이터를 검색하고 보호


//Amazon Inspector
	EC2 및 컨테이너 워크로드에서 소프트웨어 취약성 및 네트워크 노출 관리 서비스


//AWS Organizations
	여러 AWS 계정을 중앙에서 관리
	리전이 아닌 글로벌 서비스
	전체 계정을 관리하는 계정을 관리계정(Master Account)
	그 외 계정은 멤버계정
	조직관리를 위해 OU(Organization Unit) 단위로 그룹화하여 관리
	그룹마다 서비스 제어 정책(SCP, Service Control Policy) 가능
	계정 통합으로 결제를 한곳으로 통합 가능
	OU
		그룹화하여 관리하기 위한 조직 단위
		사용중인 AWS 계정을 Root OU로 초대하여 멤버계정으로 만들 수 있음
	SCP
		서비스 제어정책
		계정에 대한 AWS 서비스 엑세스 제어 정책
		계정 또는 OU 단위에 적용 가능
		OU에 적용하면 내부 계정과 내부 OU에 동일한 정책 상속


//CloudWatch
	AWS 클라우드 리소스와 AWS에서 실행되는 어플리케이션을 위한 모니터링 서비스
	지표 수집 및 추적하고 로그 파일을 수집 및 모니터링하고 경보 설정
	지표(Metrics)
		AWS 클라우드 리소스 및 AWS에서 실행하는 어플리케이션 모니터링
		CPU 사용량, 네트워크 사용량 등의 측정값
	대시보드(Dasgboard)
		AWS 리소스 및 사용자 정의 지표의 그래프를 가시적으로 표현
	로그(Logs)
		어플리케이션 로그 수집 기능
		AWS 서비스 외에도 Log Agent 설치하여 로그 수집 가능
	경보(Alarms)
		지표값에 대한 알림을 생성하는 기능


//Amazon EventBridge
	거의 실시간으로 이벤트를 자동 전송하는 서비스


//CloudTrail
	AWS 계정이 수행하는 작업에 대해 로그를 기록하는 서비스
	생성된 로그는 CloudWatch Logs 또는 S3 버킷에 저장 가능
	로그 파일은 KMS 암호화 가능
	CloudTrail Insight 사용해서 AWS 계정의 비정상적인 활동 감지 가능
	로그 파일 무결성 검증 기능을 이용해 삭제, 수정 여부 확인 가능


//Config
	AWS 리소스 구성 변경 사항을 로그기록하는 기능
	버킷 엑세스 변경, 보안 그룹 설정 변경 등 모든 변경 사항에 대한 로그 수집 가능
	수집된 로그는 분석, 보안감사를 위한 S3 버킷에 저장 가능
	리소스 구성변경 발생시 알림을 SNS Topic으로 전송 가능
	Config 규칙을 설정해서 AWS 리소스 구성의 규정준수 여부 평가 가능


//SSM(AWS Systems Manager)
	AWS 클라우드에서 실행되는 어플리케이션 및 인프라 관리에 도움을 주는 기능 모음
	여러 AWS 서비스의 운영 데이터를 중앙집중화
	AWS 리소스 전체에서 작업을 자동화 가능
	기능
		Application Manager
			어플리케이션 관리
			운영 데이터 확인 후 패치 적용 및 자동화 런복 실행
		AppConfig
			어플리케이션 구성을 생성, 관리 및 배포
		Parameter Store
			구성 데이터 관리 및 암호 관리를 위한 스토리지
			암호, 데이터베이스 문자열, AIM id, 데이터를 파라미터 값으로 저장
			값을 일반 텍스트 또는 암호화 데이터로 저장 가능
		Automation
			유지 관리 및 배포 테스크를 자동화
		Change Manager
			어플리케이션 구성 및 인프라에 대한 운영 변경 요청, 승인, 구현 관리 프레임워크
		Maintenance Windows
			운영 체제 패치, 드라이버 업데이트 같이 노드에서 중단 가능성 있는 작업 수행 시기 정의
		Fleet Manager
			온프레미스 또는 클라우드에서 실행하는 플릿 관리
		Session Manager
			SSH 키를 관리할 필요없이 보안성과 감사 가능성을 갖춘 엣지 디바이스 및 인스턴스 관리 기능
			인스턴스 원격접속 기능
		Patch Manager
			운영 체제 및 소프트웨어 패치를 자동으로 선택하고 배포
		Explorer
			AWS 리소스에 대한 정보를 보고하는 사용자 지정 가능한 운영 대시보드
		OpsCenter
			OpsItem이라는 운영 문제를 집계하고 표준화하는 동시에 진단 및 해결 데이터 제공
		Incident Manager
			AWS 호스팅 어플리케이션에서 발생하는 인스턴트를 관리


//DNS(Domain Name System)
	사람이 인식하는 도메인 이름을 컴퓨터가 인식하는 ip 주소로 변환


//Domain Level
	FQDN(Fully Qualified Domain Name): aws.amazon.com.
	SLD(Second Level Domain): aws.amazon
	TLD(Top Level Domain): .com
	Root(Root Domain): .(생략가능)


//Route 53
	AWS에서 제공하는 DNS 서비스
	퍼블릭 도메인 구매 또는 이전
	AWS 내부 VPC에서만 사용 가능한 프라이빗 도메인 생성
	라우팅 정책 적용
	TTL: DNS recursive resolver가 레코드 정보를 캐싱할 시간(요청 주기)
	상태검사: 서버의 상태를 모니터링 하는 기능
	레코드 유형
		A: 도메인 네임을 IPv4 주소로 라우팅
		AAAA: 도메인 네임을 IPv6 주소로 라우팅
		CNAME: 도메인 네임을 도메인 네임으로 라우팅
		ALIAS: 도메인 네임을 AWS 리소스로 라우팅
		MX(Mail eXchanger): 이메일 서버 연동시 메일의 소유를 확인하기 위한 레코드
		NS(Name Server): DNS 레코드를 가진 DNS 서버를 식별하기 위한 레코드
		SOA(Start Of Authority): 도메인의 정보와 권한을 가진 레코드
	라우팅 정책
		단순: 도메인 네임을 IP주소로 라우팅
		가중치 기반: 접속자가 요청하는 횟수의 가중치를 기준으로 라우팅
		지연 시간: 가장 짧은 지연시간을 제공하는 리전으로 라우팅
		지리적 위치: 사용자가 속한 대륙이나 국가를 기준으로 라우팅
		장애 조치: 기본(Primary) 라우팅 실패시 보조(Secondary) 라우팅
		다중값 응답: 사용자 요청시 다수의 값을 반환하는 라우팅


//CIDR(Classless Inter-Domain Routing)
	IP 주소 범위를 정의하는 방식
	IP 주소를 작은 그룹으로 분할하는 것을 서브네팅


//VPC(Virtual Private Cloud)
	AWS 가상 네트워크
	AWS 서비스의 네트워크 연결을 제어하는 기능
	AWS 계정을 생성하면 기본 VPC 네트워크 생성
	기본 VPC 경우 인터넷과 연결되어 있고 EC2 인스턴스도 기본 VPC에 연결


//Security Group
	EC2 인스턴스 레벨의 방화벽
	인스턴스에 대한 인바운드, 아웃바운드 트래픽 제어
	하나의 인스턴스 ENI에 5개의 보안그룹 연결 가능
	허용 규칙만 지정 가능(거부 규칙 지정 불가)
	연결 상태를 추적하는 상태 저장 방화벽(Stateful Firewall)
	상태 저장 방화벽
		나가는 트래픽을 보안그룹에서 허용하면 들어오는 트래픽은 확인하지 않음


//NACL(Aetwork Access Control List)
	서브넷 레벨의 방화벽
	서브넷 내부와 외부의 트래픽 제어하는 방화벽
	하나의 NACL은 여러 서브넷에 연결 가능
	하나의 서브넷은 하나의 NACL만 연결 가능
	허용 규칙과 거부 규칙 지정 가능
	연결 상태를 추적하지 않는 상태 비저장 방화벽(Stateless Firewall)
	EC2 웹서버 운영시 외부에서 클라이언트 접속 후 리턴 트래픽을 받을때 NAT 사용
		임시 포트(Ephemeral ports) 1024-65535 허용 필수
	규칙 번호가 가장 낮은 규칙부터 평가
	규칙에 사용할 수 있는 가장 높은 값 32766


//NAT(Network Address Translation)
	프라이빗 IP 주소를 퍼블릭 IP 주소로 변환할 때 사용
	NAT Instane
		퍼블릭 EC2 인스턴스에 NAT 기능 추가
		퍼블릭 EC2를 통해 프라이빗 EC2 인터넷 연결 가능
		사용자가 직접 EC2 인스턴스에 NAT 기능 구성
		EC2 자원을 많이 소비
	NAT Gateway
		EC2에 구성하지 않고 AWS 제공 서비스
		최대 45Gbps 자동 대역폭 확장
		포트 포워딩 등의 사용자 추가 기능 구현 불가
		보안 그룹 적용 불가
		Elastic IP 지정 필수


//VPC Peering
	VPC 간에는 기본적으로 네트워크 통신되지 않음
	두 VPC 간에 트래픽을 라우팅할 수 있도록 네트워킹 연결
	퍼블릭 인터넷을 통과하지 않고 프라이빗 IP 주소를 사용하여 서로 통신
	같은 리전, 다른 리전, 다른 AWS 계정간 가능
	일대일 연결만 가능
	지원되지 않는 경우
		CIDR Overlapping(CIDR 중첩)
		Transitive Peering(전이적 피어링)


//AWS PrivateLink
	VPC와 서비스 간에 프라이빗 연결을 제공하는 기술
	VPC 엔드포인트
		인터넷을 통하지 않고 AWS 서비스에 프라이빗하게 연결할 수 있는 진입점
		게이트웨이 엔드포인트
			AWS S3와 DynamoDB에 대한 프라이빗 연결
			하나의 엔드포인트는 하나의 VPC에만 연결 가능
			동일한 리전에서만 지원
		인터페이스 엔드포인트
			서브넷 IP 주소 범위에서 프라이빗 IP 주소를 사용하는 탄력적 네트워크 인터페이스
			지원되는 AWS 서비스 또는 VPC 엔드포인트 서비스로 전달되는 트래픽 진입점
			동일한 리전에서만 지원
		Gateway Load Balancer 엔드포인트
	엔드포인트 서비스(AWS PrivateLink)
		VPC 내에 있는 어플리케이션 또는 서비스
		다른 AWS 계정의 VPC Endpoint에서 AWS PrivateLink로 연결



//S3 연결 VPC 엔드포인트 비교
	Gateway Endpoints
		S3 퍼블릭 IP 주소 사용해서 엑세스
		온프레미스 엑세스 허용 안함
		다른 리전에서 엑세스 허용 안함
		엔드포인트 사용 비용 무료
	Interface Endpoints
		VPC 프라이빗 IP 주소 사용해서 엑세스
		온프레미스 엑세스 허용
		VPC 피어링, AWS Transit Gateway로 다른 리전의 VPC에서 엑세스 허용
		엔드포인트 사용 비용 발생


//VPN
	인터넷을 통해 가상 사설망(Vurtual Private Network) 구축
	VPN 트래픽은 VPN 프로토콜로 보호
	IPSec: Site-to-Site VPN 암호화 프로토콜
	TLS: Client VPN


//AWS VPN
	Client VPN
		AWS 리소스와 클라이언트 PC와 연결하는 OpenVPN 기반 서비스
		Active Directory 등의 자격증명을 이용한 권한 부여
		접속을 위한 VPN 구성 파일이 담긴 소프트웨어 설치
	Site-to-Site VPN(AWS Managed VPN)
		IPSec 암호화 프로토콜을 사용하여 AWS VPC와 온프레미스 간 프라이빗 네트워크 구성
		AWS Direct Connect의 백업으로 사용 가능
		VPN 터널당 최대 대역폭 1.25Gbps


//Direct Connect
	AWS와 온프레미스 간에 DX Location을 통한 전용선을 통해 프라이빗 네트워크 연결 생성
	포트당 1Gbps, 10Gbps, 100Gbps 연결 속도 사용 가능
	물리적인 구성을 위한 설치 기간 필요
	VPN보다 가격이 높지만 인터넷 전송 비용이 들지 않음
	기본적으로 암호화를 지원하지 않음


//Transit Gateway(TGW)
	복잡한 VPC 피어링 관계를 제거하고 네트워크를 간소화


//AWS Data Transfer Costs
	동일 가용영역 < 동일 리전 내의 서로 다른 가용영역 < 서로 다른 리전


//CloudFormation(Infrastructure as Code)
	AWS 인프라 세트를 수동으로 프로비저닝할수록 많은 노력이 소요
	코드를 통해 인프라를 프로비저닝, 관리하는 서비스
	코드를 통해 자동화하여 AWS 인프라를 생성, 업데이트, 삭제 가능
	AWS 인프라를 프로비저닝하는 비용과 시간 절약 가능
	구성요소
		Template: 인스턴스 유형, 인프라 구성을 위한 설정값을 json, yaml 형식 텍스트 파일
		Stack: Template을 사용하여 생성된 리소스
		Change Set: Stack 리소스 변경 사항에 대한 세트


//Container
	어플리케이션 구성 라이브러리를 패키지로 묶어서 컨테이너 엔진 위에서 실행하는 것
	OS 환경이 변경돼도 구동 가능하며 각각의 컨테이너가 독립적
	대표적으로 Kubernetes, Docker 존재
		마이크로서비스를 배포하는데 주로 사용


//AWS 컨테이너 서비스
	ECS(Elastic Container Service)
		Docker 컨테이너를 배포 및 관리하는 컨테이너 오케스트레이션 서비스
	EKS(Amazon Elastic Kubernetes Service)
		Kubernetes를 실행하는 서비스
		대규모 컨테이너 어플리케이션을 배포 및 관리하는 오픈 소스 컨테이너 오케스트레이션 서비스
	AWS Fargate
		서버리스 컨테이너 서비스
		서버 프로비저닝, 패치 적용, 클러스터 용량 및 인프라 관리를 자동 수행
		ECS, EKS와 연동해서 자동으로 컨테이너 크기를 조정하고 로드 밸런싱 가능
	ECR(Amazon Elastic Container Registry)
		Docker 등의 컨테이너 이미지를 공유, 배포 등의 관리 서비스
		ECR에서 공유된 이미지를 사용하여 ECS, EKS에서 컨테이너 구성


//Kubernetes
	컨테이너 어플리케이션 배포, 확장 및 관리를 자동화하기 위한 오픈소스 시스템
	배포 옵션
		EKS: 자체 컨트롤 플레인 또는 노드 설치, 클러스터 배포 옵션
		EKS Anywhere: 온프레미스에 클러스터 생성 및 운영 옵션
	배포 옵션
		EKS managed node groups
			자동으로 클러스터 노드 생성 및 관리
			사용자가 보안 업데이트 등의 일부 설정 및 관리 가능
			Auto Scaling 그룹의 일부로 프로비저닝
			온디맨드 또는 스팟 용량 유형을 선택 가능
		Self managed nodes
			노드를 직접 생성 및 관리
			온디맨드 또는 스팟 용량 유형을 선택 가능
		AWS Fargate
			노드 관리를 AWS에서 담당
			AWS에서 EKS 모든 환경 자동 관리


//ECS(Amazon Elastic Container Service)
	Docker 컨테이너를 지원하는 컨테이너 관리 서비스
	EC2 인스턴스의 관리형 클러스터에서 어플리케이션 실행 가능
	여러 EC2 서비스와 연동 가능
	시작 유형(ECS Launch Type)
		Fargate: 서버리스 방식으로 ECS 워크로드를 호스팅, EC2 관리 필요없음 
		EC2: 직접 클러스터 등록 후 EC2 직접 관리
		ECS Anywhere: 온프레미스 서버나 가상 머신에서 컨테이너 실행


//Serverless
	서버를 사용자가 관리할 필요 없음
	서버는 존재하며 서버 인프라 운영은 AWS 등의 클라우드 회사에서 담당
	AWS에서 용량조정, 프로비저닝, 패치 등의 인프라 관리
	AWS Lambda, AWS Fargate, S3, DynamoDB, Aurora, SNS, SQS 등


//Lambda
	코드를 실행하여 동작하는 서버리스 컴퓨팅
	코드를 입력하여 온디맨드 방식의 이벤트 중심의 실행
	다양한 언어 지원(Node.js, Python, Java, C#, Ruby)
	실행당 최대 15분 동안 구성
	동시 처리 가능한 실행 수는 1000건이며 요청을 통한 한도 증가 가능
	결합 서비스: API Gateway, Kinesis, DynamoDB, SNS, SQS, S3, CloudFront 등


//Elastic Beanstalk
	웹 어플리케이션 및 서비스를 배포하고 운영하는 서비스
	사용자가 직접 인프라 리소스를 구성할 필요없이 어플리케이션 코드에만 집중 가능
	Java, .NET, PHP, Node.js, Python, Ruby, Go, Docker 지원
	워크플로
		1. create application
		2. upload version
		3. launch environment
		4. manage environment


//머신 러닝
	Comprehend: 텍스트 안에서 특정 항목을 찾아내는 서비스
	Rekognition: 이미지, 비디오 분석
	Polly: 텍스트를 음성으로 변환하는 서비스
	Lex: 음성인식 서비스, 챗봇 구현 가능
	Textract: 스캔문서의 문자, 테이블, 양식 추출 서비스
	Translate: 번역 서비스
	Transcribe: 음성을 텍스트로 변환
	SageMaker: 머신러닝 모델 구축, 훈련 및 배포하는 서비스
	Forecast: 머신러닝 기반 시계열 예측 서비스
	Kendera: 지능형 검색 서비스
	Personalize: 실시간 맞춤화 추천에 사용하는 것과 동일한 기술
	Amazon Connect: 클라우드 기반 고객 센터 서비스


//DR(Disaster Recovery)
	Disaster: 비지니스에 심각한 부정적인 영향을 주는 사건
		Natural disasters: 지진, 홍수 등
		Technical failures: 전원 실패, 네트워크 연결 문제 등
		Human actions: 부주의한 조작/설정, 허용되지 않은 엑세스 및 변경 등
	비지니스의 연속성을 목표로 전체 워크로드를 별도의 장소에 복사
	Recovery Objectives
		RPO(Recovery Point Objective)
			복구 시점 목표
			손실 감당할 수 있는 데이터(Data Loss)의 양
		RTO(Recovery time Objective)
			복구 시간 목표
			재해 발생 후 복구하는데 걸리는 목표 시간(Downtime)
	Disaster Recovery Strategies
		Backup & Restore(active/passive)
			데이터 백업 및 장애발생시 백업으로 부터 복구
		Pilot Light(active/passive)
			코어 시스템만 복제 후 대기
		Warm standby(active/passive)
			전체 시스템을 작은 스케일로 구성하여 대기
		Multi-site(active/active)
			전체 시스템을 동일하게 복제하여 동시 운영



