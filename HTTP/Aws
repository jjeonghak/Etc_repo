//어플리케이션 구성
	어플리케이션
	OS: Window/Linux
	Computing: CPU + RAM
	Storage: HDD/SSD
	Network: 랜카드/랜선


//IaaS(Infrastructure as a Service)
	인프라(Computing, Storage, Network)만 제공
	OS를 직접 설치하고 필요한 소프트웨어 개발
	ex) AWS EC2


//PaaS(Platform as a Service)
	인프라 + OS + 기타 프로그램 실행에 필요한 부분(런타임)
	코드만 올리면 어플리케이션 동작 가능
	ex) Firebase, Google App Engine


//SaaS(Software as a Service)
	인프라 + OS + 필요한 소프트웨어 제공
	서비스 자체를 제공
	다른 세팅 없이 서비스만 이용
	ex) Gmail, DropBox, Slack, Google Docs


//클라우드 컴퓨팅 배포 모델
	공개형(클라우드): 모든 부분이 클라우드에서 실행, 낮은 비용과 높은 확장성
	혼합형: 공개형과 폐쇄형의 혼합, 전환하는 과도기에 사용
	폐쇄형: 높은 수준의 커스터마이징, 높은 초기 비용 및 유지보수, 높은 보안


//AWS 구조
	글로벌 서비스: 데이터 및 서비스를 전 세계의 모든 인프라가 공유
		IAM
		Amazon CloudFront(CDN): 엣지 로케이션을 통해 캐싱 및 트래픽 분산
		CloudFront
		WAF
		Route53 
	지역 서비스: 특정 리전을 기반으로 데이터 및 서비스 제공
		Regions: AWS의 서비스가 제공되는 서버의 물리적 위치
		VPC
		S3
		Availability Zone(2개 이상)
			RDS
			EC2


//ARN(Amazon Resource Name): AWS의 모든 리소스의 고유 아이디
	arn:[partition]:[service]:[region]:[account_id]:[resource_type]/resource_name/(qualifier)


//AWS account
	생성시 본인 명의의 카드 필요
	루트 유저와 기본 리소스등이 생성
	숫자 아이디 부여(추후 문자 별칭 지정 가능)


//루트 유저
	생성한 계정의 모든 권한
	생성시 만든 이메일 주소로 로그인
	탈취당했을시 복구가 힘들기 때문에 MFA 설정 필요
	관리용으로만 이용
	AWS API 호출 불가


//IAM 유저
	Identity and Access Management를 통해 생성한 유저
	기본 권한 없음
	AWS API 호출 가능


//가상화(virtualization)
	단일 컴퓨터의 하드웨어 요소를 일반적으로 가상 머신이라고 하는 다수의 가상 컴퓨터로 분할하는 기술
	1세대 완전 가상화(fully emulated): 모든 시스템 요소가 에뮬레이터 안에서 동작
	2세대 Paravirtualization: GuestOS는 하이퍼바이저와 통신
	3세대 Hardware Virtual Machine(HVM): 하드웨어에서 직접 가상화 지원, GuestOS가 하드웨어와 통신


//EC2
	안전하고 크기 조정이 가능한 컴퓨팅 파워를 클라우드에서 제공하는 웹 서비스
	초 단위 온디맨드 가격 모델
	인스턴스 유형과 사이즈를 직접 사용 목적에 따라 최적화 가능


//EBS
	EC2 인스턴스에 사용할 영구 블록 스토리지 볼륨 제공
	가상의 하드드라이브, EC2 인스턴스가 종료되어도 존재(네트워크로 연결)
	하나의 EBS를 여러 EC2에 장착 가능(EBS Multi Attach)


//Snapshot
	특정 시간에 EBS 상태의 저장본
	S3에 보관(증분식 저장, 변화된 값만 저장)


//AMI
	EC2 인스턴스를 실행하기 위해 필요한 정보를 모은 단위
	기존 EC2 인스턴스의 스냅샷을 이용해서 복제가능


//오토스케일링(autoscaling)
	vertical scale(scale up)
		물리적으로 인스턴스 성능을 높임, 성능이 높아질수록 효율이 낮아짐(비용이 기하급수적으로 늘어남)
	horizontal scale(scale out)
		인스턴스 성능이 아닌 규모를 높임, 비용과 성능이 같은 비율로 높아짐
	auto scaling: horizontal scale 모니터링 지원


//Elastic Load Balancer
	들어오는 애플리케이션 트래픽을 여러 대상에 자동으로 분산
	직접 트래픽을 발생시켜(Health Check) 인스턴스가 살아있는지 체크
	오토스케일링과 연동가능, 여러 가용영역에 분산가능
	application load balancer
	network load balancer
	classic load balancer
	gateway load balancer


//EFS
	NFS(Network File System) 기반 공유 스토리지 서비스(NFSv4)
	EBS와는 다르게 용량 지정할 필요 없음
	AWS 외부에서 접속 불가
	리눅스만 사용가능
	다수의 ec2 인스턴스 연결 가능
	보안 그룹을 통해 인스턴스에 연결
	수명주기 관리 정책 또는 지능형 계층화를 통해 클래스 자동 전환가능
	스토리지 클래스
		표준 스토리지: 3개의 가용영역에 데이터 저장, 자주 엑세스하는 데이터 저장용
		표준 IA: 3개의 가용영역에 데이터 저장, 자주 엑세스하지 않는 데이터 저장용
		One zone: 1개의 가용영역에 데이터 저장, 자주 엑세스하는 데이터 저장용
		One zone IA: 1개의 가용영역에 데이터 저장, 자주 엑세스하지 않는 데이터 저장용
	성능 모드: I/O, 읽기 쓰기 속도
		기본 범용 성능 모드
		최대 I/O 성능 모드
	처리량 모드: 파일 시스템 처리량
		기본 버스팅 처리량 모드: 파일 용량에 따라 자동 확장
		프로비저닝 모드: 고정으로 처리량 지정


//데이터 저장 방식
	오브젝트 스토리지: 오브젝트라는 개별 유닛에 데이터 저장
		각 유닛에 고유의 식별자 존재, 분산 시스템으로 탐색 가능
	블록 스토리지: 데이터를 고정된 사이즈의 블록으로 식별자와 함께 저장
	파일 스토리지: 데이터는 계층적 파일 디렉토리 내 폴더에 저장
		해당 데이터의 경로를 알아야 엑세스 가능


//Simple Storage Service(S3)
	객체 스토리지 서비스, 파일 보관만 가능
	글로벌 서비스지만 데이터는 리전에 저장
	버킷
		S3의 저장공간을 구분하는 단위(디렉토리와 같은 개념)
		버킷 이름은 전 세계에서 고유한 값


//S3 객체 구성
	owner: 소유자
	key: 파일 이름
	value: 파일 데이터
	verion id: 파일 버전 아이디
	metadata: 파일 정보를 담은 데이터
	ACL: 파일 권한을 담은 데이터
	torrents: 토렌트 공유를 위한 데이터


//S3 버전 관리
	객체가 여러 버전을 가질 수 있음
	동일한 이름으로 업로드시 여러 버전으로 저장
	MFA delete 옵션으로 실수로 객체를 삭제하는 것 방지


//S3 객체 암호화
	클라이언트가 SSL/TLS 암호화를 통해 서버에 데이터 저장
	서버 측 암호화(SSE): 데이터가 서버에 저장되기 전에 객체 암호화
		SSE-S3: S3에서 관리하는 암호화
		SSE-KMS: KMS에서 관리하는 암호화, 키 자동 교체 및 감시 가능
		SSE-C: 고객이 관리하는 암호화, 데이터 전송시 반드시 https 사용
	클라이언트 측 암호화: 데이터 전송전 암호화
	전송 중 암호화: SSL/TLS를 사용해 데이터 암호화, https 사용


//S3 버킷 정책
	버킷 정책: JSON 형식의 버킷 엑세스 제어 정책
	퍼블릭 엑세스 차단: 버킷과 객체에 대한 퍼블릭 엑세스 관리
	ACL: AWS 계정에 버킷이나 객체에 읽기/쓰기 권한 부여 기능


//CORS(Cross-Origin Resource Sharing)
	origin = s3 버킷 주소
	다른 오리진에 버킷에 대한 엑세스 공유
	CORS 헤더 사용


//엑세스 로깅
	S3 버킷의 모든 활동을 파일로 만들어 S3 버킷에 저장하는 기능
	감사 목적으로 활용 가능
	로그 분석을 위한 분석 도구 존재(Amazon Athena)
	절대로 로그 파일을 같은 버킷에 저장 금지(무한 루프)


//S3 복제 규칙(replication)
	S3 버킷 간에 객체를 자동으로 복제하는 기능
	버킷 복제를 위해 원본과 대상 버킷 모두 버전관리 활성화 필수
	다른 AWS 계정의 버킷으로 복제 가능
	교차 리전 복제(CRR): 서로 다른 리전의 S3 버킷으로 객체 복사
		지리적으로 가까운 엑세스가 필요한 경우, 재해복구
	동일 리전 복제(SRR): 같은 리전의 S3 버킷으로 객체 복사
		동일한 데이터를 사용하는 프로덕션과 테스트 계정 간의 복사
		법적 준수사항으로 같은 리전에 데이터 복사본


//S3 스토리지 클래스
	S3 스탠다드
		최소 3개 이상의 가용영역 분산 보관
		최소 보관 기간 및 용량 없음
		파일 요청 비용 없음(전송 요금은 발생)
	S3 스탠다드 IA(Infrequently Accessed)
		자주 사용되지 않는 데이터를 저렴한 가격에 보관
		최소 3개 이상의 가용영역 분산 보관
		최소 저장 용량 존재(128kb)
		최소 저장 기간(30일)
		데이터 요청 비용 발생
	S3 One Zone-IA
		자주 사용되지 않고 중요하지 않은 데이터를 저렴한 가격에 보관
		단 한개의 가용영역에만 보관
		최소 저장 용량 존재(128kb)
		최소 저장 기간(30일)
		데이터 요청 비용 발생
	S3 Glacier Instant Retrieval
		아카이브용 저장소
		최소 저장 용량 존재(128kb)
		최소 저장 기간(90일)
		바로 엑세스 가능
	S3 Glacier Flexible Retrieval
		아카이브 저장소
		최소 저장 용량 존재(40kb)
		최소 저장 기간(90일)
		분 ~ 시간 단위 이후 엑세스 가능
	S3 Glacier Deep Archive
		아카이브 저장소
		최소 저장 용량 존재(40kb)
		최소 저장 기간(180일)
		12 ~ 48시간 이후 엑세스 가능
	S3 Intelligent-Tiering
		머신 러닝을 사용해  자동으로 적절한 클래스 변경
		퍼포먼스 손해/오버헤드 없이 요금 최적화


//객체 수명주기 관리(lifecycle policy)
	객체가 저장되어 삭제될 때까지 수명주기를 비용효율적으로 저장되도록 관리
	버전 관리가 활성화된 경우 객체의 버전별로 수명주기정책 적용 가능
	Amazon S3 Analytics: 데이터 엑세스 패턴을 분석


//S3 Glacier Vault Lock
	아카이브 데이터를 저장하는 컨테이너
	파일을 저장후 삭제, 편집을 못하도록 정책으로 잠금
	write once read many(WORM) 모델 적용
	데이터 보관 규정 준수 정책이 있는 경우 사용


//S3 Object Lock
	일정시간 또는 무기한으로 객체가 삭제되거나 덮어쓰이지 않도록 관리
	버전관리 활성화 필수
	write once read many(WORM) 모델 적용
	거버넌스 모드: 필요에 따라 일부 사용자에게 변경하거나 객체를 삭제할 권한 부여
	규정준수 모드: aws 계정의 루트 사용자를 포함해서 덮어쓰거나 삭제할 수 없음
	법적 보존(legal hold): IAM 정책에 s3 PutObjectLegalHold 권한으로 객체 수정가능


//S3 기타 기능
	이벤트 알림: s3의 이벤트 발생시 알림 기능
	S3 Select: sql 구문을 이용해 데이터 필터링
	요청자 지불 버킷: 버킷 소유자가 아닌 요청자가 지불 기능
	미리 서명된 url(pre-signed url): 제한된 시간동안 객체를 공유
	전송 가속화: AWS 엣지로케이션을 이용해 사용자와 가까운 곳에 데이터 캐싱
	멀티 파트 업로드: 대용량의 파일을 분할하여 병렬로 업로드
	AWS Transfern SFTP: 보안 파일 전송 프로토콜
	S3 Access Point: 특정한 그룹이 허용된 데이터만 엑세스 가능
	S3 Object Lamda: AWS Lamda 함수를 사용해 데이터를 수정
	S3 Batch Operation: 단일 요청으로 많은 데이터를 처리


//Instance Store
	ec2 인스턴스에 붙는 임시 저장소
	ec2 인스턴스 종료시 초기화되는 휘발성 저장소


//스토리지 비교
	Instance Store: 특정 인스턴스에 붙는 물리적 고성능 스토리지
		임시 용도의 휘발성 저장소
	EBS: 인스턴스 생성시 AMI가 설치되는 EBS 루트 볼륨 생성
		여러 EBS 볼륨으로 하나의 인스턴스 연결 가능
		동일한 가용영역에 있는 인스턴스만 연결 가능
		스냅샷을 이용한 복사 가능
		여러 인스턴스에 연결 가능하지만 제한사항 존재(같은 가용영역)
	EFS: NFS 프로토콜을 이용한 리눅스 네트워크 파일 스토리지
		여러 가용영역에 있는 여러 인스턴스를 하나의 EFS에 연결 가능
		온-프레미스 리눅스 서버에서도 연결 가능
		클래스, 성능, 처리량 모드 설정 가능


//Storage Gateway
	온-프레미스 데이터 센터의 데이터와 AWS 클라우드의 스토리지 연결 서비스
	AWS Direct Connect, Internet 두가지 방식 존재
	하이브리드 클라우드 스토리지로 불림
	데이터를 실기간으로 전송 및 저장 가능
	온-프레미스 로컬 캐시 가능
	파일 백업, 클라우드 파일 저장소, 재해복구 저장소
	S3 파일게이트웨이
		파일 단위로 전송
		NFS, SMB 프로토콜 사용
		Active Directory 서비스와 통합하여 인증된 사용자 엑세스 가능
	FSx 파일게이트웨이
		Amazon FSx for Window File Server 파일 단위
		SMB 프로토콜 사용
	볼륨게이트웨이
		iSCSI 연결을 통한 블록 스토리지 제공
		캐싱볼륨: 기본데이터는 S3에 저장, 자주 엑세스하는 데이터는 로컬 캐싱
		저장볼륨: 모든 데이터를 S3에 저장
	테이프게이트웨이
		테이프 백업 어플리케이션과 S3 간의 전송
		테이프 백업 장치 구성을 변경하지 않고 AWS S3로 백업 가능


//Storage Gatewayu 하드웨어 어플라이언스
	스토리지 게이트 웨이 운영을 위해선 온프레미스 서버에 Storage Gateway 어플리케이션 설치 필수
	인프라가 부족한 경우 미리 설피된 하드웨어 어플라이언스 구매 운용 가능


//FSx for Lustre
	리눅스 환경을 위한 고성능 병렬 스토리지 시스템
	스크래치 파일 시스템
		임시 스토리지 및 단기 데이터 처리용
		데이터 복제되지 않음
		파일 서버 장애 발생시에도 교체되지 않음
	지속적 파일 시스템
		장기 스토리지 및 워크로드용
		데이터가 여러 가용영역에 자동으로 복제
		파일 서버 장애 발생시 교체


//FSx for Window File Server
	윈도우 서버에 구축되는 파일 공유 서비스
	SMB 프로토콜 사용(윈도우, 리눅스에서 엑세스 가능)


//Snow Family
	데이터를 네트워크가 아닌 물리적인 장치에 저장하여 전송가능한 디바이스
	온프레미스 데이터를 AWS로 마이그레이션하는 경우 사용
	마이그레이션에 대해 여러 제약 조건이 존재하는 경우 사용
	AWS Snowcone
		8TB 스토리지로 가장 작은 디바이스
		오프라인 데이터 전송 또는 AWS DataSync를 통한 온라인 전송 가능
	AWS Snowball
		데이터 마이그레이션 및 엣지컴퓨팅 디바이스
		Snowball Edge Storage Optimized: vCPU 40개, 80TB
		Snowball Edge Compute Optimized: vCPU 52개, 42TB, GPU(선택 사항)
	AWS Snowmobile
		45피트 운반 컨테이너로 최대 100PB 전송
		멀티 페타바이트 또는 엑사바이트급 디지털 미디어 마이그레이션 및 데이터 센터 종료시 적합


//AWS DataSync
	온-프레미스와 AWS, AWS 스토리지 서비스 간 데이터 전송 및 복제 자동화 서비스
	SMB, NFS 프로토콜을 사용하는 온프레미스 서버의 파일을 AWS 서비스로 전송
	전송 중이나 종료 후 데이터 무결성 확인 및 암호화 가능


//데이터 서비스 비교
	DataSync vs. Snowball Edge
		DataSync: 온라인으로 데이터 전송
		Snowball Edge: 오프라인 데이터 전송, 전송대역폭 제한 및 연결이 불안한 경우
	DataSync vs. Storage Gateway
		DataSync: 초기 데이터를 S3로 마이그레이션
		Storage Gateway: 초기 마이그레이션 이후 파일 게이트웨이 구성(지속적인 엑세스 유지)
	DataSync vs. Transfer Acceleration
		Transfer Acceleration: 대용량 파일 전송		
	DataSync vs. Transfer Family
		DataSync: 데이터 전송 가속화 및 자동화
		Transfer Family: SFTP, FTPS 및 FTP 프로토콜을 이용한 전송


//AWS Backup
	중앙 집중식 백업 관리 서비스
	백업 일정관리, 보존관리, 모니터링, 수명주기관리 등
	교차리전 백업, 교차계정 백업 지원
	리소스 태그 기반 백업 정책 구성 가능
	백업대상
		Amazon FSx
		Amazon EFS
		Amazon DynamoDB
		Amazon EC2
		Amazon EBS
		Amazon RDS
		Amazon Aurora
		AWS Storage Gateway
		VMware 가상머신


//CloudFront
	콘텐츠 전송 네트워크 서비스(CDN)
	엣지 로케이션 콘텐츠 캐싱을 이용해 빠르게 컨텐츠 배포
	엣지 로케이션은 데이터를 임시 저장할 수 있는 캐싱 기능
	오리진의 데이터를 엣지 로케이션으로 캐싱
	글로벌 배포
	오리진에서 엣지 로케이션으로 전송되는 비용 부과되지 않음
	비용 절약을 위한 엣지 로케이션 수 관리 가능
		전체 가격 등급: 모든 리전에 배포
		가격 등급 200: 대부분의 리전에 배포
		가격 등급 100: 일부 리전에 배포
	Origin group
		오리진 장애 조치
		기본 오리진 장애시 자동으로 보조 오리진으로 전환
	Lamda@Edge
		CloudFront 전달된 콘텐츠를 사용자 지정 함수 실행 기능


//CloudFront 보안 엑세스
	뷰어/오리진 프로토콜 정책
		뷰어 프로토콜과 오리진 프로토콜을 통한 보안 정책
	OAI(Origin Access Identity)
		뷰어는 바로 S3 버킷에 엑세스 불가, 엣지 로케이션을 통해서만
	Singed URL, Cookies
		서명된 url과 쿠키를 이용해 콘텐츠 접근
		서명된 url은 하나의 파일에만 유효
		서명된 쿠키는 여러 파일에 유효
	지역 제한
		특정 국가에서의 콘텐츠 엑세스 제한
		법률적인 사항으로 국가별 저작권이 다른 경우
		화이트 리스트: 리스트 내의 국가만 엑세스 허용
		블랙 리스트: 리스트 내의 국가만 엑세스 거부
	AWS Web Application Firewall(WAF), AWS Shield와 결합해 DDos 방어 가능
	필드 레벨 암호화
		민감한 데이터를 안전하게 오리진 서버로 업로드하는 기능
		put/post 요청이 오리진으로 전달되기 전 엣지 로케이션에서 비대칭 암호화 키 적용





