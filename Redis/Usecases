//실시간 리더보드
  기본적으로 리더보드는 사용자의 증가에 따라 가공해야할 데이터가 몇 배로 증가
    
    1. 절대적 리더보드(absolute leaderboard)
      서비스의 모든 유저를 정렬시켜 상위권의 목록만 표시
      
    2. 상대적 리더보드
      사용자마다 다른 데이터를 노출
      사용자의 스코어를 기반으로 입접해있는 경쟁자들의 스코어 노출
  
      //데이터 관리
      sorted set에 유저의 스코어를 가중치로 설정한다면 매번 데이터를 정렬할 필요가 없음
      서비스에 일별 리더보드를 도입하기 위해 daily-score:<날짜>를 이용해 키를 만듬
      데이터를 저장 및 업데이트할 때에는 ZADD 커맨드 사용
      ZREVRANGE 커맨드로 높은순으로 출력 가능
  
      //랭킹 합산
      주간 리더보드는 매주 월요일마다 초기화된다고 가정
      ZUNIONSTORE 커맨드를 이용해 각각의 일별 리더보드의 스코어값에 가중치를 곱한 후 더해서 정렬가능
        
        ZUNIONSTORE <생성할 키 이름> <합산할 키 개수> <합산할 키> ... [WEIGHTS 가중치 ...]

      
//최근 검색 기록    
  유저별로 다른 키워드 노출
  검색 내역은 중복 제거
  가장 최근 5개의 키워드만 사용자에게 노출

    //RDBMS
    테이블에 데이터를 저장할 때에는 기존에 같은 키워드로 검색했었는지 확인하고 업데이트 필요
    테이블에 데이터가 무기한으로 쌓이는 것을 방지하기 위해 배치 잡업 필요
    데이터를 가져올때 정렬 필요
  
      SELECT * FROM keryword WHERE user_id = 123 ORDER BY reg_date DESC LIMIT 5;
  
    //Redis
    sorted set을 이용해 중복 제거
    스코어로 시간을 사용해서 시간순으로 정렬 가능
    데이터 업데이트시 별다른 작업없이 스코어(시간)만 변경해서 데이터 삽입가능
    데이터 삽입시 가장 오래된 인덱스(0번 인덱스) 삭제가능, 이때 -6 인덱스를 사용해야 5개 이하일때 데이터 보존가능
  
      ZREVRANGE search-keyword:123 0 4 withscore
      ZREMRANGEBYRANK search-keyword:123 -6 -6


//태그 기능
  블로그에 게시물을 작성할때 여러 태그를 다는 기능
  특정 태그를 이용해 게시물 검색 가능

    //RDBMS
    적어도 2개의 데이블 필요
    태그 테이블, 태그 게시물 매핑 테이블 필요
  
      SELECT post_id FROM tag_post WHERE tag_id IN (1, 3) GROUP BY post_id HAVING COUNT(tag_id) <= 2;
  
    //Redis
    set을 이용해 각 게시물 키값으로 중복없이 태그 설정 가능
    반대로 각 태그 키값으로 중복없이 게시물 설정 가능
  
      SADD post:47:tags IT REDIS DataStore
      SADD tag:IT:posts 47
      SADD tag:REDIS:posts 47
      SADD tag:DataStore:posts 47
  
      SMEMBERS post:47:tags
      SMEMBERS tag:IT:posts
      SINTER tag:IT:posts tag:REDIS:posts


//랜덤 데이터 추출
  이벤트 등으로 랜덤한 유저를 매핑하거나 추출할 때

    //RDBMS
    RAND() 쿼리를 이용해서 랜덤 데이터 추출
    조건 절에 맞는 모든 행을 읽은 뒤, 임시 테이블에 넣어 정렬 후 다음 랜덤으로 limit까지 데이터 추출
    데이터가 1만건 이상일 경우 성능이 나빠지고 부하가 많이 생김
      
    //Redis
    RANDOMKEY 커맨드는 레디스에 저장된 전체 키 중 하나를 무작위로 반환
    하지만 레디스 인스턴스에 한가지 종류의 데이터만 저장하지 않기 때문에 이와 같은 랜덤 키 추출은 의미 없음
    HRANDFIELD, SRANDMEMBER, ZRANDMEMBER 커맨드는 각각 hash, set, sorted set에 저장된 랜덤한 아이템 반환
      COUNT: 원하는 갯수만큼 랜덤 아이템 반환, 음수일 경우 중복 아이템 추출 가능
      WITHVALUES: 필드에 연결된 값도 함께 반환


//좋아요 처리
  포털 사이트 게시물에 좋아요 버튼 클릭 기능

    //RDBMS
    테이블의 특정 행에서 좋아요 개수 데이터를 증가
    어떤 유저가 어떤 댓글에 좋아요를 눌렀는지의 데이터 또한 처리가 필요

    //Redis
    set을 이용해서 각 게시물 id를 키로 좋아요를 누른 유저 id를 저장

      SADD commnet-like:12554 967
      SCARD comment-like:12554


//읽지 않은 메시지 수 카운팅
  채팅 어플리케이션에서 사용자가 속한 채널별로 읽지 않은 메시지를 카운팅하고 관리

    //RDBMS
    메시지가 도찰할 때마다 데이터베이스 업데이트

    //Redis
    hash를 이용해 사용자 별로 채널 키를 저장한 후 읽지 않은 메시지 갯수를 저장
    인메모리 데이터베이스에 일시적으로 저장한 후 필요시점에 한꺼번에 업데이트
    채팅의 내용을 확인하거나 중복된 데이터를 고려할 필요없이 단순히 채널에 새로 추가된 메시지의 개수를 확인

      HINCRBY user:234 channel:4234 1
      HINcRBY user:123 channel:3135 -1


//DAU(Daily Active User) 구하기
  하루 동안 서비스에 방문한 사용자 수를 의미
  사용자 접근 로그를 활용해 날마다 배치 처리를 수행하는 것은 실시간 데이터 확인 불가

    //Redis
    set을 이용해서도 가능하지만 만약 하루 1000만명 이상의 유저가 방문하면 하나의 키 안에 많은 아이템 저장
    보통 키 하나에 저장하는 아이템은 200만 ~ 300만 권장
    비트맵을 활용한 계산으로 효율적으로 처리 가능(단 id는 0 이상의 정수값)

      SETBIT uv:20221106 14 1
      BITCOUNT uv:20221106
      BITOP AND event:202211 uv:20221101 uv:20221102 uv:20221103
      GET event:202211
      > "\x01\x02"


//애플리케이션 미터링
  클라우드 컴퓨팅 특성 중 Pay as you go, 서비스를 이용한 만큼 지불
  사용자가 얼마나 서비스를 이용했는지 정확하게 측정할 필요 증가
  아래의 조건을 만족한다면 Redis 사용 고려

    //Reids
    1. 집합 내의 유일한 데이터의 개수를 카운팅
    2. 1% 미만의 오차는 허용 가능
    3. 카운팅할 때 사용한 정확한 데이터를 다시 확인하지 않아도 된다

      PFADD 202211:user:245 49483
      PFADD 202211:user:245 32714
      PFADD 202211:user:245 49483
      PFCOUNT 202211:user:245
      > (integer) 2
      PFMERGE 2022:user:245 202211:user:245 202212:user:245


//위치 기반 애플리케이션
  위치 데이터를 실시간으로 처리하는 경우
    1. 사용자의 현재 위치 파악
    2. 사용자의 이동에 따른 실시간 변동 위치 업데이트
    3. 사용자의 위치를 기준으로 근처의 장소 검색

    //RDBMS
    위치 데이터를 단순히 저장만 가능
    실제 데이터 가공 및 처리 과정은 저장소 외부에서 처리

    //Redis
    geo set과 pub/sub 기능을 함께 사용해서 특정 이벤트 발생시마다 해당 지역 근처의 사용자에게 실시간 알림 가능

        GEOADD user 50.07146286003341 14.414496454175485 142
        GEOADD restaurant 50.07146286003341 14.414496454175485 ukalendu
        GEOSEARCH restaurant FROMLONLAT 50.06824582815170288 14.41818466583587366 BYRADIUS 1 km
        > 1) "ukalendu"
        GEOSEARCH key FROMMEMBER member BYBOX 4 2 km



