//원소 시퀀스 반환
  자바 7 이전에는 이런 메서드의 반환 타입을 Collection, Set, List, Iterable, 배열 사용
  자바 8 이후에는 스트림을 사용
  Stream 인터페이스는 Iterable 인터페이스가 정의한 추상 메서드를 점부 포함
  하지만 Stream이 Iterable을 확장하지는 않음
  Collection 엔터페이스는 Iterable의 하위 타입이고 stream 메서드도 제공
  원소 시퀀스 반환 공개 API는 Collection 또는 그 하위 타입을 쓰는 게 일반적
  
    //자바 타입 추론의 한계
    for (ProcessHandle ph : ProcessHandle.allProcesses()::iterator) {
        ...
    }
    
    //스트림을 반복하기 위한 끔찍한 우회방식
    for (ProcessHandle ph : (Iterable<ProcessHandle>) ProcessHandle.allProcesses()::iterator) {
        ...
    }
    
    //어댑터 사용 방식
    public static <E> Iterable<E> iterableOf(Stream<E> stream) {
        return stream::iterator;
    }
    
    public static <E> Stream<E> streamOf(Iterable<E> iterable) {
        return StreamSupport.stream(iterable.spliterator(), false);
    }


//스트림 및 컬렉션 차이
  스트림의 게으른 특성 덕분에 컬렉션보다 최적화 가능
  중간 연산은 종단 연산에서 한번에 실행
  
  1. 쇼트서킷(short circuit) : limit 연산을 통해 모든 원소를 처리하지 않음
  2. 루프 퓨전(loop fusion) : filter 및 map은 서로 다른 연산이지만 한과정으로 병합해서 처리
  
    List<String> names = menu.stream()
        .filter(dish -> {
            System.out.println("filtering:" + dish.getName());
            return disg.getCalories() > 300;
        })
        .map(dish -> {
            System.out.println("mapping:" + dish.getName());
            return disg.getName();
        })
        .limit(3)
        .collect(toList());
    
    //결과 : filtering:pork
            mapping:pork
            filtering:beef
            mapping:beef
            filtering:chicken
            mapping:chicken



