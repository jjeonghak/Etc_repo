//swift 언어 특징
safe type, 강타입, 타입 엄격

//data type
var : 변수 선언, let : 상수 선언
Bool, Int, UInt, Float, Double, Character, String

//coding style
lower camel case : function, method, variable, constant
upper camel case : type(class, struct, enum, extension)

//console.log
print : 단순 문자열 출력
dump : 인스턴스의 description 포함하여 출력

//string interpolation(문자열 보간법)
프로그램 실행 중 문자열 내에 변수 또는 상수의 실질적인 값을 표현하기 위해 사용
\()
let varialbe = Int = 10
print("print variable : \(variable)") 


//type annotations, 타입 정의
var intVal: Int = 1;
let intConst: Int = 1;


//튜플(tuples), (n쌍, n짝)
var topTitle = ("메인화면", "mainIcon.png")
topTitle.0  //메인화면
topTitle.1  //mainIcon.png


//http status code, 주로 토플사용
var httpError = (200, "success")
var httpError = (statusCode: 404, description: "not found")
httpError.statusCode  //httpError.0
httpError.description  //httpError.1


//유니코드(unicode)
//16진수표현
"\u{30}" <= inputValue && inputValue <= "\u{39}"  //숫자(0 ~ 9)
"\u{41}" <= inputValue && inputValue <= "\u{7a}"  //영어(A ~ z)


//배열(array)
var strArr = Array<String>()
var intArr = [Int]()

intArr.append(1)  //배열인덱스 추가
intArr.append(contentsOf: [1, 2, 3])  //배열인덱스 배열형태로 추가

intArr = intArr + [1]  //배열인덱스 추가, 같은 자료형으로 연산
intArr = intArr + [1, 2, 3]  //배열인덱스 배열형태로 추가

intArr.insert(1, at: n)  //n번째 인덱스 추가

intArr.count  //배열크기

intArr.remove(at: n)  //n번째 인덱스 삭제
intArr.removeFirst()  //첫번째 인덱스 삭제
intArr.removeLast()  //마지막 인덱스 삭제
intArr.removeAll()  //모든 인덱스 삭제

intArr.isEmpty()  //인덱스 유무 판별


//셋(set)
//순서 및 중복 없음, 배열의 중복제거에 사용, (Set)intArr
var intSet = set<Int>()
var intSet: Set = [1, 2, 3]
intSet.insert(1)  //append 함수 불가능
intSet.insert(1)  //이미 들어있는 값이라 들어가지 않음

intSet1.intersection(intSet2)  //교집합
intSet1.union(intSet2)  //합집합, 중복제외
intSet1.symmetricDifference(intSet2)  //합집합 - 교집합(대치차집합)
intSet1.subtracting(intSet2)  //여집합
 

//사전(dictionary)
//키-값, 옵셔널 타입 지정하지 않아도 nil 값 가능(잘못된 키값 입력시 nil 반환)
var strDic = [String : Any]()  //Any 타입은 모든 타입가능
var strDic = ["key1" : "value", "key2" : false, "key3" : 3]
strDic["key1"] = "value"
strDic["key2"] = false
strDic["key3"] = 3

strDic.keys  //키값 출력


//흐름제어(control flow)
for value in intArr {}  //배열의 인덱스 값에 접근
for (index, value) int intArr.enumerated {}  //배열의 인덱스와 인덱스 값을 튜플 형식으로 접근
for index in 0..5 {}  //숫자범위로 반복문 실행(0 ~ 5)
for index in 0..<5 {}  //숫자범위로 반복문 실행(0 ~ 4)
for index in 0..<intArr.count

let flag = 1
switch flag {
case 1, 2, 3:  //콤마 사용으로 여러값
     command1
case 4..8:   //범위
     command2
default:
     command3
}

