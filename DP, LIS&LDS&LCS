// 최장증가부분수열(LIS, Longest Increasing Subsequence)은 각 원소가 이전 원소보다 큰 부분 수열 중 가장 긴 부분수열
// 최장감소부분수열(LDS, Longest Decreasing Subsequence)은 각 원소가 이전 원소보다 작은 부분 수열 중 가장 긴 부분수열
  
int arr[number]; //배열
int dp[number]; //이전 원소들 중 증가하는 원소갯수
int max = 0;
for (int i = 0; i < n; i++) {
	int min = 0;
	for (int j = 0; j < i; j++) {
		if (arr[i] > arr[j]) { //arr[i]가 더 크면 LIS, 작으면 LDS
			if (min < dp[j]) min = dp[j];
		}
	}
	dp[i] = min + 1;
	if (max < dp[i]) max = dp[i];
}

// 최장공통부분문자열(LCS, Longgest Common Substring)과 최장공통부분수열(LCS, Longest Common Subsequence) 
// x = ABCDHEF, y = BCDEF 일때 최장공통부분문자열은 BCD(연속적), 최장공통부분수열은 BCDEF(비연속적) 

// 최장공통부분문자열(LCS, Longgest Common Substring)
if (i == 0 || j == 0) LCS[i][j] = 0;
else if (string_x[i] == string_y[j]) LCS[i][j] = LCS[i - 1][j - 1] + 1;
else LCS[i][j] = 0;

1) 문자열 x와 문자열 y를 한글자씩 비교
2) 두 문자가 다르다면 LCS[i][j]에 0을 표시(공통 문자열은 연속적)
3) 두 문자가 같다면 LCS[i-1][j-1]에 +1
4) 위 과정 반복

// 최장공통부분수열(LCS, Longest Common Subsequence) 
if (i == 0 || j == 0) LCS[i][j] = 0;
else if (string_x[i] == string_y[j]) LCS[i][j] = LCS[i - 1][j - 1] + 1;
else LCS[i][j] = max(LCS[i - 1][j], LCS[i][j - 1]); //비교하는 두 문자가 다를때 이부분 다름

//길이
1) 문자열 x와 문자열 y를 한글자씩 비교
2) 두 문자가 다르다면 LCS[i-1][j]와 LCS[i][j-1] 중 큰값을 표시(공통 수열은 비연속적)
3) 두 문자가 같다면 LCS[i-1][j-1]에 +1
4) 위 과정 반복

//찾기
1) LCS 배열의 가장 마지막 값에서 시작, 결과값 저장할 결과배열 준비
2) LCS[i-1][j]와 LCS[i][j-1] 중 현재 값과 같은 값 탐색
 2-1. 만약 같은 값이 있다면 해당 값으로 이동
 2-2. 만약 같은 값이 없다면 결과배열에 해당 문자 삽입 후 LCS[i-1][j-1]로 이동
3) 2번 과정 반복, 0으로 이동하면 탐색종료, 결과배열의 역순이 LCS

