// 기본 출력 : 파이썬과 유사, 각 줄마다 '\n' 적용
console.log('Hello World!')
console.log("Hello" + "World")
console.log(5 + 10)

// 세미콜론 : 기본적으로 한 줄에 하나씩 적용, 한 줄에 여러가지 문장이 있는 경우 세미콜론(;) 필요

// 추상화(Abstraction) : 여러가지 사물이나 개념에서 공통되는 특성이나 속성 따위를 추출하여 파악하는 작용

// 변수, 상수 선언 및 정의
let variable_name;  // 변수 선언, unfined 값
let variable_name = 5;

const CONST_NAME = 1;  // 상수 선언시 초기화 필수, 변경 불가

1. JavaScript 식별자는 영어, 밑줄(_), 달러기호($)로 시작, 그 후 숫자 가능
2. 대문자 소문자 구별
3. 예약어 사용불가
4. camelCase 스타일 추천
5. 들여쓰기는 space 2칸

// 함수 정의 및 호출
function functionName(parameter){  // 정의
  명령;
};
functionName();  // 호출

// 연산
1. 더하기 : 문자열 이어줌
          console.log(1 + `1`);
          - 결과 : 11  // 문자열 우선순위가 높음

2. 나머지 연산 : Number형 계산
              console.log(1 - true);
              console.log(`2` ** true);
              - 결과 : 0, 2  // 나머지 연산들은 문자열 계산 불가


// 동등 및 일치
1. 일치 및 불일치 : 형변환이 발생하지 않고 계산
                 console.log(1 === '1');
                 console.log(1 === true);
                 console.log(null === undefined);
                 - 결과 : false, false, false
                 
2. 동등 및 부등 : 형변환이 발생
               console.log(1 == '1');
               console.log(1 == true);
               console.log(null == undefined)
               - 결과 : true, true, true

// 문자열
"", '', `` 셋 다 가능
문자열 더하기 연산 : 문자열 이어짐

// 템플릿 문자열 : ``을 사용한 문자열은 ${} 안에 문자열 포멧팅 가능
console.log(`string format ${variable_name}`) 

// 데이터 타입
string, boolean, number, null, undefined
1. null : 의도적으로 값이 없다고 표현할 때 사용하는 값
          기본적으로 변수 초기화시 값이 없다는 표현으로 null로 초기화
          
2. undefined : 값이 없다는 것을 확인하는 값
               기본적으로 값이 초기화되지 않은 변수

// typeof 연산자
연산 결과를 문자열로 반환, 사칙연산보다 우선순위 높음
실수와 정수 구분 없이 number로 출력
console.log(typeof `A` + `B`);
- 결과 : stringB
console.log(typeof 5 - 2);  // string - int 형태
- 결과 : NaN

// falsy값 : boolean으로 형변환시 false 값을 가지는 값
``, NaN, 0  // 비어있는 문자열, 숫자가 아닌 값, 0은 fasle값을 리턴




