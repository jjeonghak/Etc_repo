//지연로딩
  연관관계 설정시 fetch = FetchType.LAZY 옵션을 통해 프록시로 조회(지연로딩)
      @ManyToOne, @OneToOne default == EAGER  //JPQL N+1 문제발생, 실무사용금지
      @OneToMany, @ManyToMany default == LAZY
  만약 즉시로딩과 같이 생성과 함꼐 여러 참조를 조회해야하는 경우 fetch join 이용
      em.createQuery("select m from Member m join fetch m.team", Member.class)
  초기값은 프록시 객체인 ByteBuddyInterceptor
  

//프록시 기초
  가짜 엔티티 객체($HibernateProxy$)를 이용해서 실제 값이 필요할 때마다 쿼리문 생성
  실제 엔티티를 상속받아서 생성, 실제 클래스와 겉 모양은 동일(내부는 비어있음)
  프록시 객체는 실제 객체의 참조(target)를 보관
  프록시 객체를 호출하면 프록시 객체는 실제 객체의 메소드 호출
      em.find() : 데이터베이스를 통해서 실제 엔티티 객체 조회
      em.getReference() :  데이터베이스 조회를 미루는 가짜 엔티티 객체 조회
    

//프록시 객체 초기화
    1. 메소드 호출(getName())
    2. 프록시 객체의 target null
    3. 프록시 객체는 영속성 컨텍스트에 초기화 요청
    4. 영속성 컨텍스트가 데이터베이스 조회
    5. 실제 엔티티 생성
    6. 프록시 객체의 target에 실제 엔티티 연결
    7. 실제 엔티티 메소드 호출(target.getName())
  

//프록시 특징
  프록시 객체는 처음 사용할 때 한번만 초기화
  초기화 완료 후 프록시 객체를 통해 실제 엔티티에 접근 가능
  타입 비교시 instanceof 비교사용(== 비교실패)
  영속성 컨텍스트에 찾는 엔티티가 존재하면 getReference 호출해도 실제 엔티티 반환
  반대로 프록시 객체가 이미 존재하면 find 호출해도 프록시 객체 반환
  준영속 상태일때, 프록시 초기화시 문제 발생(LazyInitiallizationException)
      Member proxyMember = em.getReference(Member.class, primaryKey);
      em.detach(proxyMember);  //em.close(); em.clear(); 결과 동일
      proxyMember.getName();  //LazyInitiallizationException 오류발생
  

//프록시 확인
  프록시 인스턴스 초기화 여부
      emf.getPersistenceUnitUtil.isLoaded(Object entity);
  프록시 클래스 확인방법
      entity.getClass()
  프록시 강제 초기화(프록시 객체의 메서드 호출해도 초기화 가능)
      org.hibernate.Hibernate.initialize(entity);




