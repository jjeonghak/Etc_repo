방향(direction) : 단방향과 양방향
다중성(multiplicity) : 다대일(n:1), 일대다(1:n), 일대일(1:1), 다대다(n:m)
연관관계 주인(owner) : 객체 양방향 연관관계에서 관리주인 필요


//객체를 테이블에 맞추어 모델링
  외래키 식별자를 직접 사용해서 조인
  협력관계를 만들 수 없음
      Team team = new Team();
      team.setName("TeamA");
      em.persist(team);  //영송상태가 되면 pk 값 보유
      
      Member member = new Member();
      member.setName("memberA");
      member.setTeamId(team.getId());  //외래키 식별자를 직접 사용
      em.persist(member);
  
      Long findTeamId = findMember.getTeamId();
      Team findTeam = em.find(Team.class, findTeamID);
      

//단방향 연관관계 모델링
  pk 값을 꺼내서 자동으로 fk 값과 매핑
  객체 지향적 참조를 통한 그래프 탐색 가능
      public class Member {

          @ManyToOne(fetch = FetchType.EAGER)  //단방향 다대일 관계
          @JoinColumn(name = "TEAM_ID")  //실제 매핑되는 pk
          private Team team;
      }

      Team team = new Team();
      team.setName("TeamA");
      em.persist(team);  

      Member member = new Member();
      member.setName("memberA");
      member.setTeam(team);  //단방향 연관관계 설정, 참조 저장
      em.persist(member);

      Team findTeam = member.getTeam();


//양방향 연관관계
  테이블 연관관계는 외래키 하나로 조인을 통한 양방향 가능(방향 개념이 없음)
  객체의 양방향 관계는 서로 다른 단방향 관계 2개
    단방향 매핑만으로 이미 연관관계 매핑완료, 반대 방향 조회 기능이 추가된 것
    단방향 매핑을 하고 필요시에 양방향 매핑 추가(JPQL 역방향 탐색이 필요한 경우)
  객체의 양방향 관계는 단방향 관계 2개 중 하나로 외래키 관리(연관관계 주인)
      public class Team {
          
          @OneToMany(mappedBy = "team")  //연결된 fk 이름, 연관관계 주인 지정
          List<Member> members = new ArrayList<Member>();  //관례, 널포인트 오류 방지
      }


//연관관계 주인(Owner)
  양방향 매핑 규칙
    객체의 두 관계중 하나를 연관관계 주인으로 지정(비지느스 로직 기준과는 상관없음)
    외래키가 있는 곳을 주인으로 추천(Many 쪽: 주인)
    연관관계 주인만이 외래키 관리
    주인이 아닌 관계는 읽기만 가능
    주인은 mappedBy 속성 사용불가
    반대로 mappedBy 속성으로 연관관계 주인 설정

  보편적인 실수
    연관관계의 주인에 값을 입력하지 않음(순수한 객체관계를 고려하면 항상 양쪽 모두 값을 입력)
    연관관계 편의 메소드 추천
        public void changeTeam(Team team) {  //set은 관례, 좀더 로직 추가시 change
            this.team = team;
            team.getMembers().add(this);
        }
    양방향 매핑시 무한루프 주의
        toString(), lombok, JSON 생성 라이브러리




