// 깊은 것을 우선적으로 탐색(DFS, Depth First Search)
모든 정점을 발견하는 가장 단순하고 고전적인 방식
1) 현재 정점과 인접한 간선들을 하나씩 검사하다가 아직 방문하지 않은 정점으로 향하는 간선이 있다면 그 간선을 통해 탐색
2) 이과정 중에 더이상 갈 곳이 없는 정점에 도달할 경우 마지막에 따라왔던 간선을 따라 뒤로 돌아간다. 

// 인접 리스트 표현, 시간 복잡도 O(V+E)
vector <list<int>> adj; 
vector <bool> visited; //방문 여부

void dfs(int here) {
	visited[here] = true; //방문 처리
	for (int i = 0; i < adj[here].size(); i++) { //모든 인접 정점 순회
		int there = adj[here][i]; 
		if (!visited[there]) dfs(there); //방문하지 않은 경우
	}
	//더이상 방문할 정점이 없으면 재귀호출 종료 후 이전 정점으로 돌아감
}

void dfsALL() { //모든 정점을 방문, dfs함수만으로 모든 정점을 순회 불가(연결상태에 따라)
	visited = vector<bool>(adj.size(), false); //방문 여부 초기화
	for (int i = 0; i < adj.size(); i++) { //모든 정점 순회
		if (!visited[i]) dfs(i);
	}
}

// 인접 행렬 표현, 시간 복잡도 O(V^2)
int c[number]; //방문처리를 위한 배열
vector <int> a[number + 1]; //인덱스 시작 1

void dfs(int x) { //스택없이 
	if (c[x]) return;
	c[x] = true;
	cout << x;
	for (int i = 0; i < a[x].size(); i++) {
		int y = a[x][i];
		dfs(y); //재귀함수를 이용(스택의 원리) 
	}
}
int main(void) {
	a[1].push_back(2); //노드의 연결 상태대로
	a[2].push_back(1);
	a[1].push_back(3); 
	a[3].push_back(1);

	a[2].push_back(3); 
	a[3].push_back(2);
	a[2].push_back(4);
	a[4].push_back(2);
	a[2].push_back(5);
	a[5].push_back(2); //이외에도 노드 연결

	dfs(1); //시작노드부터
	return 0;
}
