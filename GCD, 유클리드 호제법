// 약수의 정의
A, B가 정수일때 A(A!=0)가 B의 약수이면 B = A*k 를 만족하는 정수 k 존재, 즉 A가 B를 나눈다.

// 유클리드 호제법(Euclidean algorithm)
두 수 또는 정식의 최대공약수(GCD, Greatest Common Divisor)를 빠르게 계산, 반복 또는 재귀적으로 계산한다.

1) gcd(A,B) (단, A>B, A!=B)
2) A = qB + r (단, 0 <= r < B)
3) gcd(A,B) = gcd(B,r) 

명제 : gcd(A,B)이 g일때 gcd(B,r)도 g이다. 
* 귀류법을 이용해 명제를 참으로 가정, A = ga, B = gb (단, a와 b는 서로소, gcd(a,b)=1)
즉, ga = qgb + r
      r = g(a-q*b)
      r = gr'

B = gb이며 r = gr'이므로 g는 공약수확정, b와 r'이 서로소이면 g는 최대공약수 
* 또다시 귀류법을 이용해 gcd(b,r') = m이라고 가정(m!=1)
 b = mb', r' = mr"
 A = qB + r = qgb + gr' = qgmb + gmr" 
   = gm(qb'+r")
 B = gb = gmb'

따라서 gcd(b,r') = m이면 gcd(A,B) = gm이 되므로 처음 명제조건에 위반, gcd(b,r') = 1 
그러므로 b와 r'은 서로소이며 gcd(B,r) = g이다.

// 1번(재귀)
int gcd(int a, int b) {
	return b ? gcd(b, a % b) : a; //나머지가 0일때 a값이 최대공약수
}
// 2번(재귀)
int gcd(int a, int b) {
	if (a % b == 0) return b; //나머지가 0일때 b값, 위의 알고리즘과는 리턴하는 순서차이
	else return gcd(b, a % b);  
}
// 3번(반복)
int gcd(int a, int b) {
	int c;
	while (b) {
		c = a % b;
		a = b;
		b = c;
	}
	return a; //나머지가 0일때
}

