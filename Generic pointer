//void pointer(generic pointer) is a special type of pointer that can be pointed at 
  objects of any data type
//a void pointer is declared like a normal pointer, using the void keyword as the 
  pointer's type

struct Somthing
{
    int n;
    cloat f;
}

int nValue;
float fValue;
Somthing sValue;

void *ptr;
ptr = &nValue;
ptr = &fValue;
ptr = &sValue;


//however, because the void pointer does not know what type of object it is pointing to, 
  dereferencing a void pointer is illegal
//Instead, the void pointer must first be cast to another pointer type before
  the dereference can be performed
  
int valaue{5};
void *voidPtr{ &value };
//std::cout << *voidPtr illegal: dereference of void pointer

int *inPtr{ static_cast<int*>(voidPtr) };
//however, if we cast our void pointer to an int pointer

std::cout << *inPtr << '\n'; //then we can dereference the result
- 결과 : 5
