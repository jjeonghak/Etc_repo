# 힙을 이용한 우선순위
# 각 부모 노드는 자식 노드보다 크므로 루트 노드는 힙의 최대값
# 최댓값을 잎노드와 바꾼후 처리, 힙정렬

# 우선순위 구현 비교
1. 정렬된 동적 배열
   1) 먼저 새로운 데이터가 어느 위치에 들어가야 하는지 탐색 : 이진탐색 O(lnN)
   2) 그 위치에 데이터 삽입 : O(N)
   3) 데이터 추출 : O(1)
   
2. 정렬된 더블리 링크드 리스트
   1) 위치 탐색 : 선형탐색 O(N)
   2) 데이터 삽입 : O(1)
   3) 데이터 추출 : O(1)

3. 힙
   1) 데이터 삽입 : O(lnN)
   2) 데이터 추출 : O(lnN)

from heapify_code import *

class PriorityQueue:
    """힙으로 구현한 우선순위 큐"""
    def __init__(self):
        self.heap = [None]  # 파이썬 리스트로 구현한 힙

    def insert(self, data):
        """삽입 메소드"""
        self.heap.append(data)  # 힙의 마지막에 데이터 추가
        reverse_heapify(self.heap, len(self.heap)-1) # 삽입된 노드(추가된 데이터)의 위치를 재배치

    def extract_max(self):
        """최우선순위 데이터 추출 메소드"""
        swap(self.heap, 1, len(self.heap)-1)  # 힙의 최댓값과 잎노드 교환
        index_max = self.heap.pop()  # 잎노드의 최댓값 처리
        heapify(self.heap, 1, len(self.heap))  # 힙정렬
        return index_max
        

    def __str__(self):
        return str(self.heap)
