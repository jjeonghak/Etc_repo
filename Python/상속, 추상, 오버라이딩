# Mro(Method resolution order) 메소드
help()를 통해서도 접근 가능, 클래스가 가지고 있는 부모 클래스(상속 관계) 리스트 출력
자식 클래스의 오버라이딩된 메소드와 기존 메소드의 이름이 같을때 mro리스트 순으로 메소드 탐색

# Isinstance()
어떤 인스턴스가 주어진 클래스의 인스턴스인지 판단, bool 값 리턴
1. 첫 번째 파라미터 = 검사할 인스턴스
2. 두 번째 파라미터 = 기준 클래스

class1 = Class1()
print(isinstance(class1, Class1)) 
print(isinstance(class1, Class2)) 
- 결과 : True
         False 

# Issubclass()
어떠한 클래스가 다른 클래스의 자식 클래스인지 판단, bool 값 리턴
1. 첫 번째 파라미터 = 검사할 클래스
2. 두 번째 파라미터 = 기준 부모 클래스


# Overriding
자식 클래스에서 부모 클래스의 변수와 함수 사용

class Class2(Class1):
    Class1_variable = a  #기존 부모 클래스에 존재하는 변수 그대로 값만 변경해 사용
    
    def __init__(self, a, b, c):
        super().__init(a, b)  #기존 부모 클래스 메소드 호출
        self.c = c  #새롭게 자식 클래스 정보 추가

# ABC
추상(ABC, Abstract Base Class) 클래스, 추상화 기초 클래스
ABC를 상속받고 하나 이상의 추상 메소드 필요, 추상 클래스로 인스턴스 생성불가

from abc import ABC, abstractmethod

class Class1(ABC):  #부모 클래스
    @abstractmethod  #자식 클래스 오버라이딩 강요
    def fucntion(self):
        pass

