//Authentucation
  로그인 완료시 시큐리티 세션으로 생성되는 객체
  기본적으로 UserDetails 객체를 포함
  OAuth 로그인 사용자는 OAuth2User 객체를 포함
    

//유저 정보 사용
  기본적으로 Authentication, UserDetails, PrincipalDetails(개발자 커스텀 객체) 객체로 사용
  OAuth 로그인 사용자는 Authentication, OAuth2User 객체로 사용
  
  	@GetMapping("/test/login")
    public @ResponseBody String testLogin(Authentication authentication,
        @AuthenticationPrincipal UserDetails userDetails) {
        log.info("======== /test/login ========");
        PrincipalDetails principalDetails = (PrincipalDetails) authentication.getPrincipal();
        log.info("authentication:{}", authentication.getPrincipal());
        log.info("principalDetails:{}", principalDetails);
        log.info("userDetails:{}", userDetails);
        return "session info";
    }

    @GetMapping("/test/oauth/login")
    public @ResponseBody String testOauthLogin(Authentication authentication,
        @AuthenticationPrincipal OAuth2User oauth) {
        log.info("======== /test/login ========");
        OAuth2User oAuth2User = (OAuth2User) authentication.getPrincipal();
        log.info("authentication:{}", oAuth2User.getAttributes());
        log.info("oauth2User:{}", oauth.getAttributes());
        return "Oauth session info";
    }


//PrincipalDetails
  기본적인 로그인과 OAuth 로그인의 유저 정보 객체가 상이
  Authentication 객체로 만들기 전에 두 객체를 모두 수용하는 객체를 이용해서 추상화
    
    @Data
    public class PrincipalDetails implements UserDetails, OAuth2User {

        private User user;
        private Map<String, Object> attributes;

        //일반 로그인
        public PrincipalDetails(User user) {
            this.user = user;
        }

        //OAuth 로그인
        public PrincipalDetails(User user, Map<String, Object> attributes) {
            this.user = user;
            this.attributes = attributes;
        }

        //해당 유저의 권한을 리턴
        @Override
        public Collection<? extends GrantedAuthority> getAuthorities() {
            Collection<GrantedAuthority> collect = new ArrayList<>();
            collect.add(() -> user.getRole());
            return collect;
        }

        @Override
        public String getPassword() {
            return user.getPassword();
        }

        @Override
        public String getUsername() {
            return user.getUsername();
        }

        //계정 만료 여부
        @Override
        public boolean isAccountNonExpired() {
            return true;
        }

        //계정 잠금 여부
        @Override
        public boolean isAccountNonLocked() {
            return true;
        }

        //계정 비밀번호 기간
        @Override
        public boolean isCredentialsNonExpired() {
            return true;
        }

        //계정 활성화
        @Override
        public boolean isEnabled() {
            return true;
        }

        //OAuth2User 상속을 위한 오버라이드
        @Override
        public Map<String, Object> getAttributes() {
            return attributes;
        }
        
        @Override
        public String getName() {
            return null;
        }
    }



