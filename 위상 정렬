// 위상 정렬(Topology sort)이란 순서가 정해져있는 작업을 차례대로 수행해야할때 순서를 결정
// 사이클이 없는 DAG(Directed Acyclic Graph)에서만 적용가능, 시작점이 존재해야 하는데 사이클에서는 불가능
// 여러가지 답이 존재할 수 있다.

1. 현재 그래프의 위상 정렬 가능여부
2. 위상 정렬이 가능할때 그 결과

// 큐 사용
1. 진입차수(진입에 필요한 조건의 갯수)가 0인 정점을 큐에 삽입
2. 큐에서 원소를 꺼내어 연결된 모든 간선 제거
3. 간선 제거 이후 진입차수가 0이 된 정점 큐에 삽입
4. 큐가 빌 때까지 2~3번 과정 반복
 1) 모든 원소를 방문하기 전 큐가 빈다면 사이클 존재
 2) 모든 원소를 방문하고 큐가 빈다면 큐에서 꺼내는 순서가 위상 정렬 결과
 
int n, inDegree[MAX];
vector<int> v[MAX];

void topologySort() {
	int result[MAX];
	queue<int> q;
	for (int i = 1; i <= n; i++) {
		if (inDegree[i] == 0) q.push(i); //진입차수가 0인 노드 큐에 삽입
	}
	for (int i = 1; i <= n; i++) {
		if (q.empty()) return; //사이클이 존재하는 경우
		int x = q.front();
		q.pop();
		result[i] = x;
		for (int i = 0; i < v[x].size(); i++) {
			int y = v[x][i]; //제거한 정점과 연결된 모든 정점
			if (--inDegree[y] == 0) q.push(y); //간선 제거 후 새롭게 진입차수가 0이 된 정점 삽입
	 }
     }
}
