//Object basics
//In computer science, an object can be a variable,  a data structure, a function, or a method, 
  and as such, is a value in memory referenced by an identifier
//In the object-oriented programming paradigm, object can be a combination of variables, functions,
  and data structures
//An object is an instance of a class 
//The terms object and instance may be used interchangeably

1. String object
   operator[]  //provide access to the value stored at a given index within the string 
   operator=  //assigns a string to another 
   operator+=  //appends a string or single character to the end of a string object
   at  //provides bounds-checking access to the character stored at a given index
   length  //returns the number of characters that make up the string
   size  //returns the number of characters that make up the string(same as length)
   find  //locates the index of a substring within a string object
   substr  //returns a new string object made of a substring of an existing string object
   empty  //returns true if the string contains no characters, another returns false
   clear  //removes all the characters from a string
   
   std::string word;
   
   word = "good";
   word.operator=("good");
   
   word += "bye";
   wore.operator+=("bye");


2. I/O stream
   #include<iostream>
   대상이 키보드 및 모니터로 정해짐
   
   std::cin >> x;  //삽입연산자 >>  
   cin.operator>>(x);
   
   std::cout << x;  //추출연산자 <<
   cout.operator<<(x);  
   cout.operator<<(x).operator<<('\n')

   
3. File stream
   #include<fstream>
   대상과 그 수가 정해지지 않음
   
void save_vector(const std::string& filename, const std::vector<int>& vec) {
	std::ofstream out(filename);  //default 값 : 유사한 이름의 파일 존재시 기존 파일 삭제후 새로 생성
	out.open(filename);
	if (out.good()) {  //작동여부 확인, 사용불가한 또는 사용중인 저장공간 접근시 false
		int n = vec.size();
		for (int i = 0; i < n; i++) out << vec[i] << " ";  //Space delimited 구분문자
		out << '\n';
		out.close();  //메모리 누수등 여러 문제 방지
	}
	else std::cout << "Unable to save the file\n";
}

void load_vector(const std::string& filename, std::vector<int>& vec) {
	std::ifstream in(filename);
	in.open(filename);
	if (in.good()) {
		vec.clear();
		int value;
		while (in >> value) vec.push_back(value);
		in.close();
	}
	else std::cout << "Unable to load in the file\n";
}



   
