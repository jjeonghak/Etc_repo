//shell script : 셀이나 명령 줄 인터프리터에서 돌아가도록 작성되었거나 한 운영체제를 위해 쓰인 스크립트
//환경 : Linux 기반 시스템, Bash shell(/bin/bash)

//쉘스크립트 작성
touch shell_script.sh  #파일 생성
vim shell_scrip.sh  #파일 편집기 실행

//샤뱅(Shabang), 해쉬뱅(Hashbang)
#!/bin/bash
* 기본적인 #은 주석이지만 스크립트 첫줄 #!은 인터프리터와 옵션을 가지는 명령, 스크립트 해석기 정의

//실행권한부여
chmod +x shell_script.sh

//실행방법
./shell_script.sh

//기본출력
echo "Echo test"  #자동개행
printf "Printf test"  #자동개행 아님
printf "%s %s" Printf test  #뒤에 오는 문자열들이 파라미터
printf "%s\n" $0  #실행하는 스크립트의 파일명, 경로 포함시 경로도 출력
printf "%d %s %s\n" $# $1 $2  #스크립트에 전달되는 파라미터 객수(#), 스크립트 전달 파라밑터(1, 2)

//변수선언
변수명=데이터  #띄어쓰기 허용안됨
$변수명  #선언한 변수 접근

변수명=(데이터1데이터2데이터3)  #리스트, 띄어쓰기 허용안됨
${변수명[인덱스]}  #리스트 인덱스 접근

variable_name='data'
echo $variable_name

list_name=("data1""data2")
echo ${list_name[0]}  #인덱스 값 출력
echo ${list_name[@]}  #배열의 모든 데이터 출력
echo ${list_name[*]}  #배열의 모든 데이터 출력
echo ${#list_name[@]}  #배열의 크기 출력

echo $list_name[1]  #쉘스크립트는 list_name까지만 인식한 후 [1]를 일반적인 스트링으로 인식 


//실행 디렉토리 파일 리스트
file_list=($(ls))  #해당 쉘스크립트 실행 디렉토리 내의 파일리스트 배열로 선언
echo ${file_list[*]}  

//연산
num='expr \( 3 \* 5 \) / 4 + 7'
# expr 사용시 작은 따옴표(') 사용
# 연산자 *와 괄호() 앞에는 \사용
# 연산자와 숫자, 변수, 기호 사이에는 공백추가

//조건
if [ condition ]
then 
    function1
else 
    function2
fi

//수치비교 및 조건
a -eq b  #equal ==
a -ne b  #not equal !=
a -lt b  #less than <
a -le b  #less or equal <=
a -gt b  #greater than >
a -ge b  #greater or equal >=

-z string  #문자가 null이면 true
-n string  #문자가 null이 아니면 true
-e file_name  #파일 존재시 true
-d file_name  #디렉토리 파일이면 true
-h file_name  #심볼릭 링크 파일이면 true
-f file_name  #일반 파일이면 true
-r file_name  #읽기가능 파일이면 true
-w file_name  #쓰기가능 파일이면 true
-x file_name  #실행가능 파일이면 true
-s file_name  #크기 0인 파일이 아니면 true
-u file_name  #set-user-id 설정 파일이면 true

//논리연산
condition1 -a condition2  #and
condition1 && condition2
condition1 -o condition2  #or
condition1 || condition2  
!condition  #not
true
false

//반복문
for variable_name in data1 data2
do
    function
done

while [ condition ]
do
    function
done



