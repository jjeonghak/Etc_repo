# 연결리스트(Linkedlist)
저장공간이 한곳에 위치하지 않으며 크기 또한 설정되어 있지 않다.
각 노드마다 다음 노드를 가리키는 포인터를 지니고 있다.
class Node:
    """노드 클래스"""
    def __init__(self, data)
        self.data = data
        self.next = None
        #더블 self.prev = None


class LinkedList:
    """링크드 리스트 클래스"""
    def __init__(self):
        self.head = None  
        self.tail = None
    
    def append(self, data):
        """링크드 리스트 추가 연산 메소드"""
        new_node = Node(data)
        
        if self.head is Node:  #링크드 리스트가 비어있는 경우
            self.head = new_node
            self.tail = new_node
        else:
            self.tail.next = new_node
            #더블 new_node.prev = self.tail
            self.tail = new_node  #마지막 노드 변경
    
    def insert_after(self, previous_node, data):  #0인덱스 삽입 불가
        """링크드 리스트 주어진 노드 뒤 삽입 연산 메소드"""
        new_node = Node(data)
        
        if previous_node is self.tail:
            self.tail.next = new_node
            self.tail = new_node
        else:
            new_node.next = previous_node.next
            previous_node.next = new_node
    
    def prepend(self, data):  #0인덱스 삽입 가능
        """링크드 리스트의 가장 앞에 데이터 삽입"""
        new_node = Node(data)
        
        if self.head is not None:
            new_node.next = self.head
        else:
            self.tail = new_node
            
        self.head = new_node
    
    def delete_after(self, previous_node, data)
        """링크드 리스트 삭제연산, 주어진 노드 뒤 노드 삭제"""
        data = previous_node.next.data
        
        if previous_node.next is self.tail:
            previous_node.next = None
            self.tail = previous_node
        else:
            previous_node.next = previous_node.next.next
        
        return data
    
    def __str__(self):
        """링크드 리스트를 문자열로 표현"""
        res_str = ""
        
        while iterator is not None:
            res_str += f"{iterator.data} "
            iterator = iterator.next
        
        return res_str
        
 
linked_list = LinkedList()  #새로운 링크드 리스트 생성 

linked_list.append(1)  #링크드 리스트 데이터 추가
linked_list.append(2)

