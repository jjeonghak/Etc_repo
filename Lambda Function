//a lambda expression allows us to define an anonymous function inside another function
//함수에 인수로 호출되거나 전달되는 위치에서 바로 익명 함수 개체를 정의하는 방법

  1) [captureList] (parameterList) mutable throw() -> returnType {body}
  2) [captureList] (parameterList) mutable -> returnType {body}
  3) [captureList] (parameterList) -> returnType {body}  //const
  4) [captureList] (parameterList) {body}  //return type or void
  5) [captureList] {body}  //no argument
  
//mutable allows body to modify the captured objects by copy 
//captureList is a comma-separated list of zero or more captures
//parameterList is a comma-separated list of parameters
//returnType is the type of the result the function returns 

//CaptureList
  1) [] : no captureList
  2) [=] : copy, default는 const(수정불가능), mutable 사용시 수정가능 
  3) [&] : reference 수정가능

struct S {void f(int i);};

void S::f(int i){
    [&, i] {};  //ok
    [&, &i] {};  //error: i preceded by & when & is the default
    [=, this] {};  //error: this when = is the default
    [=, *this] {};  //ok: captures this by value
    [i, i] {};  //error: i repeated
}

//Body
람다식의 본문은 일반 함수 또는 멤버 함수의 본문에 허용되는 모든 것 포함가능
  1) 캡처된 변수
  2) 매개 변수
  3) 로컬 선언된 변수
  4) 클래스 내 선언되고 캡처된 경우 클래스 데이터 this 멤버
  5) 정적 스토리지 기간이 있는 모든 변수

int main(){
    int m = 0;
    int n = 0;
    [&, n] (int a) mutable {m = ++n + a;}(4);  //변수 n은 값별로 캡터, 람다식 호출 후 해당값 유지
    std::cout << m << endl << n << endl;
}

- 결과 : 5
        0

#include<iostream>
#include<functional>

std::function<double(double)> derivative0  //함수<리턴타입(파라미터타입)>
    (std::function<double(double)> f, double h){ 
    return [f, h](double x) {return (f(x + h) - f(x))/h;}; 
    //변수 x를 파라미터로 받는 함수 리턴
}
double fun(double x) {return 3 * x*x + 5;}

int main(void){
    double h = 0.00001;
    auto der0 = derivative0(fun, h);
    std::cout << der0(5.) << std::endl;
    auto der1 = [h](double x) {return (fun(x + h) - fun(x)) / h;};
    std::cout << der1(5.) << std::endl;
    return 0;
}

- 결과 : 30
        30
