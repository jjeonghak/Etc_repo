// 시간 복잡도 : O(N*logN)
// 반으로 나누고 나중에 합쳐서 정렬

void merge(int a[], int m, int middle, int n) { 
	int i = m;
	int j = middle + 1;
	int k = m;

	while (i <= middle && j <= n) { //작은 순서대로 배열에 삽입
		if (a[i] <= a[j]) {
			sorted[k] = a[i];
			i++;
		}
		else {
			sorted[k] = a[j];
			j++;
		}
		k++;
	}
	if (i > middle) { //남은 데이터 삽입
		for (int t = j; t <= n; t++) {
			sorted[k] = a[t];
			k++;
		}
	}
	else {
		for (int t = i; t <= middle; t++) {
			sorted[k] = a[t];
			k++;
		}
	}
	for (int t = m; t <= n; t++) {
		a[t] = sorted[t];
	}
}
void mergeSort(int a[], int m, int n) { 
	if (m < n) {
		int middle = (m + n) / 2;
		mergeSort(a, m, middle);
		mergeSort(a,middle+1,n);
		merge(a, m, middle,n);
	}
}
