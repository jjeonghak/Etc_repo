// 참조자(Reference)는 변수나 상수를 들어있는 주소를 가리키는 것
// 가리키고자 하는 타입 뒤에 &
// 함수도 포인터 형식으로 사용가능

int a = 3; 
int& another_a = a; //another_a는 a의 주소값을 나타냄, 별명생성
another_a = 5; //another_a는 a의 주소값이므로 a도 5로 변경

1) 레퍼런스는 반드시 처음 선언할 때 주소값을 입력해야 한다. 
2) 한번 어떤 변수의 참조자가 되면 더이상 다른 변수를 참조할 수 없다.

int& anoter_a; //이와 같은 문장은 불가능
int a = 3; 
int& another_a = a;
int b = 5;
anoter_a = b; //anoter_a의 주소 안에 b의 값이 들어가는 것, a = b와 동일

// 포인터
포인터와 상수 연산의 결과는 포인터  
p + i : 포인터가 가리키는 변수의 i번째 인덱스, 즉 + 데이터크기 * i
int* p; //가능
int a = 3; 
p = &a; //포인터는 a를 가리킴
int b = 5;
p = &b; //이제부터 포인터는 b를 가리킴

*f, &f //함수 포인터 가능

char *a; //문자열 배열과 유사
a = "abcde"; //문자형포인터는 문자열 저장가능
printf("%8.3s", a); //8자리 중 3개 출력
- 결과 : _____abc

// 상수 레퍼런스
int &ref = 4; //컴파일 에러(컴파일러마다 상이), 에일리언싱
const int &ref = 4; //가능
int a = ref; //a에 4가 삽입

// 배열의 레퍼런스
int& arr[2] = {a, b}; //컴파일 에러
int arr[2] = {a, b}; //미리 배열 선언
int (&ref)[2] = arr; //가능

// 댕글링 레퍼런스(Dangling reference)
// 레퍼런스를 리턴하는 함수에서 지역 변수의 레퍼런스를 리턴할 경우 발생
int& function() { //참조자를 리턴
	int a = 2;
	return a; //참조자를 리턴하나 지역변수인 a는 함수와 함께 사라짐
}
int main() {
	int b = function(); //컴파일 오류는 아니나 런타임 오류 발생
  int& c = function(); //이것도 런타임 오류 발생
  const int& d = function(); //상수 레퍼런스로 리턴값을 받을 경우 레퍼런스가 소멸할 때까지 해당 리턴값은 연장됨
	b = 3;
  c = 3;
}
