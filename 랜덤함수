// 랜덤함수
1. rand()
  함수원형 : int rand(void)
  Generate random number[0 ~ RAND_MAX]
  RAND_MAX = 32767(헤더파일에 매크로로 저장)
  * 프로그램이 생성될때 랜덤값이 정해지기 때문에 여러번 실행해도 처음 실행한 값이 나온다.

2. srand()
  함수원형 : void srand(unsined int seed)
  Initialize random number generator
  * rand 함수에 사용될 수를 초기화, 매개변수 seed 값 이용
    즉, 매개변수로 들어오는 seed 값이 동일하면 rand() 값도 동일 

3. time()
  헤더파일 : #include<ctime>
  함수원형 : time_t time(time_t* timer);
  UCT 기준 1970년 1월 1일 0시 0분 0초부터 경과된 시간을 sec으로 환
  다른 함수를 통해 날짜 계산가능
  * scand()의 seed값이 항상 변하고 같지 않으면 rand()의 결과값도 항상 변하기 때문에 seed값으로 사용
    rand()%n은 랜덤분포가 고르지 못하므로 rand()*n/(RAND_MAX+1) 사용추천
    큰 랜덤값을 원한다면 (int)(((double)((rand()<<15)|rand()))/(((RAND_MAX<<15)|RAND_MAX)+1)*(n))

// 0 ~ n-1의 랜덤함수
1) time을 seed로 srand()
2) rand()
3) rand() % n을 이용해 0 ~ n-1의 난수 생성

int main(void) {
	srand((unsigned int)time(NULL)); //시간은 계속 증가하는 상태이므로 동일한 seed값 없음
	for (int i = 0; i < cnt; i++) { //cnt = 난수생성갯수
		int num = rand() % n; //srand()의 각기 다른 seed값 받음
		cout << num << endl;
	}
	system("pause"); //일시적으로 결과를 지연, 밑의 소스는 잠시 실행안됨
	return 0; //return 0 위의 pause는 결과 확인 전에 종료되는 것을 방지
}


// 메르센 알고리즘(Mersenne twister algorithm)
일반적인 rand()는 21억번마다 반복적인 패턴을 갖지만 메르센 알고리즘은 2^19937 - 1번마다 반복적인 패턴
반복주기 : 4.3154 * 10^6001, MT19937
seed : random_device
generator : mt19937, mt19937_64, default_random_engine
distribution : uniform_int_distribution
	       uniform_real_distribution
	       normal_distribution

#include<iostream>
#include<iomanip>
#include<random>
using namespace std;

int main(){
    random_device rdev;
    mt19937 mt(rdev());
    uniform_int_distribution<int> dist(0, 99);
    // normal_distribution<double> dist(50., 10.) 평균과 표준편차
    int histogram[100] = {0};
    for(int i=0;i<1000000;i++){
        int r = dist(mt);  //난수발생
        // if(r>=0&&r<=99)
        histogram[r]++;
    }
    for(int i=0;i<100;i++){
        cout << i << ": " << histogram[i] <<'\n';
    }
}



