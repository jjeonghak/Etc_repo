//세션
  쿠키에 중요한 정보를 보관하는 방법의 보안 문제를 해결
  중요한 정보를 모두 서버에 저장
  임의의 세션 저장소를 서버에 생성
  회원 로그인시 UUID를 이용한 토큰 생성후 세션 저장소에 key-value로 매핑
  세션 key 값을 쿠키로 전달


//세션 직접 생성
  세션 생성, 조회, 만료 기능 구현

    @Component
    public class SessionManager {

        //동시성 문제로 인해 ConcurrentHashMap 사용
        private Map<String, Object> sessionStore = new ConcurrentHashMap<>();
        public static final String SESSION_COOKIE_NAME = "mySessionId";

        public void createSession(Object value, HttpServletResponse response) {
            //세션 id를 생성하고 값 저장
            String sessionId = UUID.randomUUID().toString();
            sessionStore.put(sessionId, value);

            //쿠키 생성
            Cookie mySessionCookie = new Cookie(SESSION_COOKIE_NAME, sessionId);
            response.addCookie(mySessionCookie);
        }

        public Object getSession(HttpServletRequest request) {
            Cookie sessionCookie = findCookie(request, SESSION_COOKIE_NAME);
            if (sessionCookie == null) {
                return null;
            }
            return sessionStore.get(sessionCookie.getValue());
        }

        public void expire(HttpServletRequest request) {
            Cookie sessionCookie = findCookie(request, SESSION_COOKIE_NAME);
            if (sessionCookie != null) {
                sessionStore.remove(sessionCookie.getValue());
            }
        }

        public Cookie findCookie(HttpServletRequest request, String cookieName) {
            Cookie[] cookies = request.getCookies();
            if (cookies == null) {
                return null;
            }
            return Arrays.stream(cookies)
                    .filter(cookie -> cookie.getName().equals(cookieName))
                    .findAny()
                    .orElse(null);
        }
    }





