//a class can be derived from more than one classes, which means it can inherit
  data and functions from multiple base classes
//to define a derived class, we use a class derivation list to specify the base class
//where access-specifier is one of public, protected, or private,  and base-class is 
  the name of a previously defined class
//Constructors, destructors, nonmember functions, assignment operator, and 
  virtual methods are not inherited

//Inheritacne mechanics
  =============================================================================
    Inheritance           type Base access           type Derived access type
  -----------------------------------------------------------------------------
     private                  private               inherited but inaccessible
    (default)                 protected                       private
                              public                          private
  ----------------------------------------------------------------------------- 
     protected                private               inherited but inaccessible
                              protected                      protected
                              public                         protected
  ----------------------------------------------------------------------------- 
     public                   private               inherited but inaccessible
                              protected                      protected
                              public                          public
  =============================================================================            
  - 부모의 private : 상속은 가능하지만 접근불가능, 상속 고려한다면 public, protected로 설정

class B{
public:
    void f(){
        std::cout << "In function 'f'\n";
    }
};

class D: public B{
public:
    void g(){
        std::cout << "In function 'g'\n";
    }
};

int main(void){
    B class_B;
    D class_D;
    class_B.f();
    class_D.f();
    class_D.g();
}
- 결과 : In function 'f'
        In function 'f'
        In function 'g'



