#include <stdlib.h>

void  exit(int status);

//terminate calling process
//프로그램을 종료하기 위한 정기적인 정리를 수행하여 프로세스를 정상적으로 종료
//objects with static storage duration are destroyed(C++) and functions registered with ateist are called
//If status is zero or EXIT_SUCCESS, a successful termination status is returned to the host environment
//If status is EXIT_FALLURE, an unsuccessful termination status is returned to the host environment
//otherwise, the status returned depends on the system and library implementation


void  abort(void);

//abort current process
//현재 프로세스를 중단하여 비정상적인 프로그램 종료를 생성
//the program is terminated without destroying any object and without calling 
  any of the functions passed to atexit or at_quick_exit


int ateixt(void *func(void));

//set function to be executed on exit
//func이 가리키는 함수는 프로그램이 정상적으로 종료될 때 인자 없이 자동 호출
//하나 이상인 경우 모두 역순으로(스택) 실행(마지막으로 지정된 엑시트 함수부터 먼저 호출)
//단일 함수는 종료시 두번 이상 실행되도록 등록가능
//함수가 성공적으로 등록되면 0, 아니면 0이 아닌 값 반환

void  fnExit1(void)
{
    puts("Exit function 1");
}

void  fnExit2(void)
{
    puts("Exit function 2");
}

int main(void)
{
    atexit(fnExit1);
    atexit(fnExit2);
    puts("Main function");
    return 0;
}

- 결과 : Main function
        Exit function 2
        Exit function 1
       
       
