//Move Semantics
//객체의 리소스(동적 할당 메모리와 유사)를 또 다른 객체로 전송하는 것
//객체의 리소스(동적할당 된 변수)를 다른 객체로 이동시키는 행위
//사용되지 않을 임시객체의 리소스 소유권만 이동시키고 불필요한 메모리 할당과 복사 방지

class Widget{
    int* a;
public:
    Widget() : a(nullptr) {}
    Widget(int _data) : a(new int){
        *a = _data;  //int형 크기 할당 후 _data 값 대입
    }
    Widget(const Widget& rhs) : a(new int){
        *a = *rhs.a;
    }
    Widget& operator=(const Widget& rhs){
        if(a != nullptr) delete a;
        a =  new int;  //할당
        *a = *rhs.a;  //할당
        return *this; 
    }
    Widget& operator=(Widget&& rhs){  //move semantics, overloading
        if(a != nullptr) delete a;
        a = rhs.a;  //할당
        rhs.a = nullptr;  //rvalue이지만 lvalue와 유사, reference collapsing rule
        return *this;
        //주소값만 가져온 후 사용하지 않을 객체는 nullptr
    }
    ~Widget() {
        delete a;
    }
};

void f(const Widget& rhs){
    std::cout << "const Widget&\n";
}

void f(const Widget&& rhs){
    std::cout << "const Widget&&\n";
}

int main(void){
    Widget A;
    f(A);  //const Widget&
    
    f(Widget());  //const Widget&&
    f(std::move(A));  //const Widget&&
    f(static_cast<Widget&&>(A));  //const Widget&&
    
    Widget B[10];
    for(int i=0;i<10;i++) B[i] = Widget(i);
    return 0;
}


//Reference collapsing rule
lvalue와 rvalue 두 종류의 레퍼런스
1. & & (L + L = L)
2. & && (L + R = L)
3. && & (R + L = L)
4. && && (R + R = R)

template <typename T>
void f(T&& _argv){
    //working...
}

int main(){
    Widget A;
    f(A);  //lvalue, Widget& &&_argv
    f(Widget());  //rvalue, Widget&& &&_argv
}

