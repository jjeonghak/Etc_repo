//가상 메소드 테이블(Virtual method table, vtable)
//가상 메소드 테이블은 동적 디스패치(런타임 메소드 바인딩)를 지원하기 위해 프로그래밍 언어에서 사용되는 메커니즘
클래스가 가상함수를 정의할 때마다 대부분의 컴파일러는 클래스에 숨겨진 멤버 변수를 추가하고 이것은 가상함수들에 대한 포인터들의
배열들을 가리킨다. 이 포인터(vptr)들은 실행 기간 도중에 정확한 함수를 가리키게 되는데 컴파일 타임에는 베이스 함수가 호출될
것인지 또는 베이스 클래스를 상속한 클래스에 의해서 구현될 지 알려져 있지 않기 때문이다.

class NoVTable{
    int data;
public:
    void set(int d) { 
        data = d;
    }
};

class HasVTable {
    int data;
public:
    virtual void set(int d){
        data = d;
    }
};

int main(void){
    NoVTable no_vtable;
    no_vtable.set(10);
    
    HasVTable has_vtable;
    has_vtable.set(10);
    
    std::cout << "no_vtable size = " << sizeof no_vtable << '\n';
    std::cout << "has_vtable size = " << sizeof has_vtable << '\n';
}

- 결과 : no_vtable size = 4
        has_vtable size = 8  //컴파일러마다 상이


//가상 함수
//a virtual function is a member function which is declared within a base class and is re
  definded(overriden) by a deived class

class Base{
public:
    virtual void f(){  //dynamic dispatch -> polymorphism
                       //만약 virtual 함수가 아닐 경우 다형성 불가
        std::cout << "base\n";  
    }
};

class Derived : public Base{
public:
    void f() override{  //override : virtual overriding 일반 오버라이딩 함수
                        //final : final virtual overriding 마지막 오버라이딩 함수
        std::cout << "derived\n";
    }
};

int main(void){
    Base b;
    Derived d;
    
    Base& br = b;  //the type of br is Base&
    Base& dr = d;  //the type of dr is Base& as well
    br.f();  //Base::f()
    dr.f();  //Derived::f()
    
    Base* bp = &b;  //the type of bp is Base*
    Base* dp = &d;  //the type of dp is Base* as well
    bp -> f();  //Base::f()
    dp -> f();  //Derived::f()
    
    br.Base::f();  
    dr.Base::f();
}

- 결과 : base
        derived
        base
        derived
        base
        base

