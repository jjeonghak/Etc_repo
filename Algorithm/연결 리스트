// 연결리스트(Linked list)
1) 특정 위치에서의 삽입과 삭제를 상수 시간에 수행가능
2) 배열과는 다르게 원소들이 메모리 여기저기 흩어져 분포해 있다.
3) 삭제했던 원소 돌려놓기 편함
4) 동적 배열과 서로 보완하는 관계로 자주 사용

// 양방향 연결리스트(Doubly linked list)는 각 원소가 이전과 다음 원소를 가리키는 포인터 보유
// 단방향 연결리스트(Singly linked list)는 각 원소가 다음 원소를 가리키는 포인터 보유
// 연결리스트의 첫 번째 노드와 마지막 노드를 각각 머리(Head)와 꼬리(Tail)이라고 부른다.

struct ListNode {
	int element; //담고 있는 원소
	ListNode* prev, * next; //이전, 다음 노드의 포인터 
};

연결리스트는 메모리 여기저기 노드들이 흩어져 있기 때문에 특정한 위치의 값을 찾기 어렵다. i번째 노드를 찾기위해서는 리스트의 머리부터 시작해서 포인터를 따라가야 한다.
반면 다른 노드들의 순서를 유지하면서 새 노드를 삽입하거나 기존 노드를 삭제하는 작업이 용이하다. 수정할 노드와 이전/이후 노드의 포인터만을 바꾸면 된다. 
또한 삭제했던 노드는 노드가 사라진 것이 아닌 포인터 연결이 끊어진 것이기 때문에 쉽게 복구가 가능하다.

void deleteNode(ListNode* node) { //node의 이전/이후 노드의 포인터를 바꿔서 node를 리스트에서 삭제 
	node->prev->next = node->next;
	node->next->prev = node->prev;
}

void recoverNode(ListNode* node) { //node의 이전/이후 노드의 포인터를 바꿔서 node를 리스트에서 삽입 
	node->prev->next = node;
	node->next->prev = node;
}
