// count sort
// 시간 복잡도 : O(N + k)
// k : 정렬한 수중 가장 큰 수
// 모든 수의 중복 횟수를 저장한 후 누적합을 이용해 정렬
// 비교 정렬이 아닌 안정 정렬
// 범위 조건이 있는 경우
// 정렬하는 수가 크지 않다면 사용, 수가 크다면 경로압축 필수


int index[n];
int count[n];
int result[n];

void countSort()
{
	int sum = 0;

	//정렬하려는 수의 중복횟수
	for (int i = 0; i < n; i++)
    		count[index[i]]++;
    	
	//누적합을 이용한 각 수 별로 시작 인덱스값
	for (int i = minNum; i <= maxNum; i++)
	{
		if (count[i] != 0)
		{
			sum += count[i];
			count[i] = sum;
		}
	}
	
	//각 수의 시작 인덱스값부터 줄여가며 정렬
	for (int i = 0; i < n; i++)
	{
    		if (count[index[i]] != 0)
    		{
    			result[count[index[i]]] = index[i];
			count[index[i]]--;
    		}
	}
}

