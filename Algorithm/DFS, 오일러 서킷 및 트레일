// 오일러 서킷(Eulerian circuit)이란 그래프의 모든 간선을 정확히 한 번씩 지나서 시작점으로 돌아오는 경로이다.
그래프의 간선들이 두개 이상의 컴포넌트에 나뉘어 있는 경우 오일러 서킷 존재하지 않음
오일러 서킷은 모든 정점에 들어가는 횟수와 나오는 횟수가 같아야 하므로 그래프의 모든 정점들이 짝수점이며, 간선들이 하나의 컴포넌트에 포함.

// 시작점을 u, 끝점을 v
// 한 정점에 인접한 간선의 수 = 차수(Degree)
1) u와 v가 같지 않은 경우, 항상 v는 홀수 개의 간선과 인접해 있을 것이다. v를 지나가기 위해서는 v로 들어가는 데 하나, 나가는 데 하나의 간선이 필요
2) u와 v가 같은 경우, v에 인접한 간선의 수는 항상 짝수이다. u에서 나가는 것으로 시작했으니, 들어온 뒤 다시 나갈 수 없다면 지금까지 사용한 간선의 수는 항상 짝수

// DFS를 이용한 오일러 서킷 탐색, 시간 복잡도 O(V*E)
vector <vector<int>> adj; //인접 행렬 표현
void getEulerCircuit(int here, vector<int>& circuit) { //결과로 얻어지는 circuit을 뒤집으면 오일러 서킷이 된다
	for (int there = 0; there < adj[here].size(); there++) {
		while (adj[here][there] > 0) {
			adj[here][there]--; //양쪽 간선 삭제
			adj[there][here]--; 
			getEulerCircuit(there, circuit);
		}
	}
	circuit.push_back(here);
}

// 오일러 트래일(Eulerian trail)이란 오일러 서킷처럼 그래프의 모든 간선을 정확히 한 번씩 지나지만 시작점과 끝점이 서로 다른 경로이다.
점 a에서 시작해서 점 b에서 끝나는 오일러 트레일은 a와 b 사이에 간선 (b,a)를 추가한뒤 오일러 서킷을 탐색하고 후에 간선 (b,a)를 삭제한다.
오일러 서킷은 시작점과 끝점을 제외한 모든 점은 짝수점이고 시작점과 끝점은 홀수점이다.

// 오일러 서킷과 트레일 판별
오일러 트레일의 시작점에서는 나가는 간선의 수가 들어오는 간선의 수보다 하나 많아야 한다.
따라서 이런 정점이 있다면 오일러 트레일, 아니면 오일러 서킷
