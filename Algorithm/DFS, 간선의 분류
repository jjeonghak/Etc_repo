DFS 스패닝 트리(DFS Spanning tree)란 깊이 우선 탐색 중 탐색이 따라가는 간선들만 모아을때 나타나는 트리형태이다.

// 유향 그래프
1) 트리 간선(Tree edge)은 스패닝 트리에 포함된 간선을 의미
2) 순방향 간선(forward edge)은 스패닝 트리의 선조에서 자손으로 연결되지만 트리 간선이 아닌 간선을 의미
3) 역방향 간선(Back edge)은 스패닝 트리의 자손에서 선조로 연결되는 간선을 의미
4) 교차 간선(Cross edge)은 이 세가지 분류를 제외한 나머지 간선들 의미, 즉 선조와 자손 관계가 아닌 정점들 간에 연결된 간선

// 무향 그래프
무향 그래프의 모든 간선은 양방향 통행이 가능하므로 교차 간선이 존재하지 않는다.
또한 순방향 간선과 역방향 간선의 구분이 없다.

// 간선 구분 방법
가장 먼저 구분하기 쉬운 간선은 트리 간선
1) (u,v)가 순방향 간선이라면 v는 u의 자손이어야 한다. 따라서 v는 u보다 늦게 발견
2) (u,v)가 역방향 간선이라면 v는 u의 선조여야 한다. 따라서 v는 u보다 먼저 발견
3) (u,v)가 교차 간선이라면 dfs(v)가 종료한 후 dfs(u)가 호출되어야 한다. 따라서 v는 u보다 먼저 발견

만약 v가 u보다 먼저 방문되었다면 v가 u의 부모인지 아닌지 알 수 없다.
이와 같은 경우 dfs(v)가 종료했는지 확인한다. dfs(v)가 종료된 경우 v는 u의 선조이니 (u,v)는 역방향 간선이 되고, 아닌 경우 교차 간선이다.

vector <vector<int>> adj; 
vector <int> discovered, finished; //i번 정점의 발견순서, dfs(i) 종료여부
int cnt;

void dfs2(int here) {
	discovered[here] = cnt++;
	for (int i = 0; i < adj[here].size(); i++) { //모든 인접 정점 순회
		int there = adj[here][i];
		if (discovered[there] == -1) {//방문한적 업는 경우
			cout << "Tree Edge" << endl; //트리 간선
			dfs2(there); 
		}
		else if (discovered[here] < discovered[there]) {//there가 here보다 늦게 발견됐으면 there은 here의 후손
			cout << "Forward Edge" << endl; //순방향 간선
		}
		else if (finished[there]==0) {//there가 아직 종료하지 않았으면 there는 here의 선조
			cout << "Back Edge" << endl; //역방향 간선
		}
		else { //이 외 경우 모두 교차 간선
			cout << "Cross Edge" << endl;
		}
	}
	finished[here] = 1; //종료시 1
}
