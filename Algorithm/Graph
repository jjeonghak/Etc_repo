// 그래프(Graph)
그래프 G(V,E)란 어떤 자료나 개념을 표현하는 정점(Vertex)들의 집합 V와 이들을 연결하는 간선(Edge)들의 집합 E로 구성된 자료 구조

// 그래프의 종류
1) 방향 그래프(Directed graph) : 각 간선이 방향이라는 속성을 가짐
2) 무향 그래프(Undirected graph) : 방향 속성이 없음
3) 가중치 그래프(Weighted graph) : 각 간선이 가중치라는 실수속성을 가짐
4) 다중 그래프(Multigraph) : 두 정점 사이에 두 개 이상의 간선이 존재 할 수 있음
5) 단순 그래프(Simple graph) : 두 정점 사이에 최대 한 개의 간선만 존재
6) 루트 없는 트리(Unrooted tree) : 부모 자식 관계 없는 트리
7) 이분 그래프(Bipartite graph) : 그래프의 정점들을 겹치지 않는 두 개의 그룹으로 나눠서 서로 다른 그룹에 속한 정점들 간에만 간선이 존재
8) 사이클 없는 방향 그래프(DAG, Directed Acyclic Graph) : 한 점에서 출발해 자기 자신으로 돌아오는 경로가 존재하지 않는 방향 그래프
9) 희소 그래프(Sparse graph) : 간선의 수가 V^2에 비해 훨씬 적은 그래프, 인접 리스트가 유리
10) 밀집 그래프(Dense graph) : 간선의 수가 V^2에 비례하는 그래프, 인접 행렬이 유리 

// 그래프의 경로
경로(Path)란 끝과 끝이 연결된 간선들을 순서대로 나열한 것
1) 단순 경로(Simple path) : 경로 중 한 정점을 최대 한 번만 지나는 경로
2) 사이클(Cycle) 혹은 회로(Circuit) : 시작점에서 출발하여 다시 시작점에서 끝나는 경로

// 인접리스트 표현
인접 리스트(Adjacency list) 표현은 그래프의 각 정점마다 해당 정점에서 나가는 간선의 목록을 저장해서 그래프를 표현, 각 정점마다 하나의 리스트 보유
1) 두 정점이 주어질 때 이 정점이 연결되어 있는지를 알기 위해서 연결 리스트를 다 확인해야 한다.
2) 연결 리스트에 실제 간선 수만큼의 원소가 들어 있으므로 전체 O(V+E)의 공간만을 사용

vector <list<int>> adjacent; //정점 i와 간선을 통해 연결된 정점들의 번호를 저장
struct Edge {
	int vertex; //간선의 반대 끝 점의 번호
	int weight; //간선의 가중치
};

// 인접 행렬 표현
인접 행렬(Adjacency matrix)은 연산속도가 높음
1) 정점의 번호 u, v가 주어졌을 때 두 정점을 잇는 간선이 있는지 한 번의 배열 접근만으로 확인가능
2) 이차원 배열을 이용하기 때문에 실제 간선의 개수와 관계없이 항상 O(V^2) 크기의 공간 사용

vector <vector<bool>> adjacent; //이차원 배열을 이용해 그래프의 간선 정보를 저장

