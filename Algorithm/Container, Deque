template< class T, class Alloc = allocator<T> > class deque;

//Double ended queue
//deque(usually pronounced like "deck") is an irregular acronym double-ended queue
//double-ended queues are sequence containers with dynamic sizes that can be expanded or contracted on both ends

//they provid a functionality similar to vectors, but with efficient insertion and deletion of elements also 
  at the beginning of the sequence, and not only at its end
//but, unlike vectors, deques are not guaranteed to store all its elementss in contiguous storage location
  : accessing elements in a deque by offsetting a pointer to another element causes undefined behavior

//both vectors and deques provide a very similar interface and can be used for similar purposes, but internally 
  both work in quite different ways: while vectors use a single array that needs to be occasionally 
  reallocated for growth, the elements of a deque can be scattered in different chunks of storage,  with the 
  container keeping the necessary information internally to provide direct access to any of its elements in 
  constant time and with a uniform sequential interface(through iterators)

//therefore, deques are a little more complex internally than vectors, but this allows them to grow more efficiently
  under certain circumstances, especially with very long sequences, where reallocations become more expensive

//for operations that involve frequent insertion or removals of elements at positions other than the beginning or 
  the end, deque perform worse and have less consistent iterators and references than lists and forward lists


//container properties
  1) Sequence
     elements in sequence containers are ordered in a strict linear sequence
     individual elements are accessed by their position in this sequence
     
  2) Dynamic array
     generally implemented as a dynamic array, it allows direct access to any element in the sequence and provides 
     relatively fast addition/removal of elements at the beginning or the end of the sequence
  
  3) Allocator-aware
     the container uses an allocator object to dynamically hendle its storage needs

