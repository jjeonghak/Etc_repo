//arrays are fixed-szie sequence containers : they hold a specific number of elements 
  ordered in a strict linear sequence
//zero-sized arrays are valid, but they should not be dereferenced(members front, back, and data)
//unlike the other standard containers, arrays have a fixed size and do not manage the allocation of its
  elements through an allocator : they are an aggregate type encapsulating a fixed-size array of elements
//단일 식별자를 통해 같은 자료형의 여러 변수에 접근할 수 있게 해주는 연속적 집계 데이터구조
//기본적으로 포인터 형식이므로 pass by address 형태 


//container properties
  1) Sequence 
     elements in sequence containers are ordered in a strict linear sequence
     individual elements are accessed by their position in this sequence
     
  2) Contiguous storage
     the elements are stored in contiguous memory locations, allowing constant time random access to elements
     pointers to an element can be offset to access other elements
     
  3) Fixed-szie aggregate
     the container uses implicit constructors and destructors to allocate the required space statically
     its size is compile-time constant
     no memory or time overhead


1. 동적배열(Dynamic array)
   배열은 선언할 때 배열의 크기를 지정해야하며, 그 이상의 자료를 삽입할 수 없다. 하지만 동적배열은 자료의 개수가 변합에 따라 크기가 변경된다.

   1) 원소들은 메모리의 연속된 위치에 저장된다.
   2) 주어진 위치의 원소를 반환하거나 변경하는 동작을 O(1)에 할 수 있다.
   3) 배열의 크기를 변경하는 resize() 연산이 가능하며 배열의 크기 N에 비례하는 시간이 걸린다.
   4) 주어진 원소를 배열의 맨 끝에 푸가함으로써 크기를 1 늘리는 append() 연산을 지원한다.

   int size; //배열의 크기
   ElementType* array; //실제 배열을 가리키는 포인터

   if (size == capacity) { //배열용량이 꽉 찼을 경우 재할당
	int newCapacity = 2 * capacity;
	int* newArray = new int[newCapacity]; //용량을 2배만큼 늘린 새 배열을 할당받음
	for (int i = 0; i < size; ++i) { //기존 자료 복사
		newArray[i] = array[i];
	}
	if (array) delete[] array; //기존 배열 삭제 후 새 배열로 변경
	array = newArray;
	capacity = newCapacity;
   }

   array[suze++] = newValue; //배열에 새로운 원소 삽입


2. 고차원 배열(Multidimensional array)
   일차원 배열과 다르게 인덱스 값이 배열인 배열
   dataType array[size2][size1];  //크기가 size1인 1차원 배열이 size2만큼 존재
   dataType array[size2][size1] = {{...}, {...} ...}; 
   dataType array[size2][size1] = {...};  //1차원 배열과 같은 방식의 초기화
   
   dataType array[][size1] = {{...}, {...} ...};  //1차원 배열의 크기가 나와있으므로 가능 
   //dataType array[][] 불가능, 배열이 어떤 구조로 나누어지는지 알수 없음
   
   dataType (*array)[size1]  //포인터 크기가 size1인 1차원 배열의 주소
   dataType *array[size1]  //배열요소가 데이터타입 포인터인 1차원 배열
   
   int m[3][2] = {{1}, {2}, {3, 4}};
               = {{1, 0}, {2, 0}, {3, 4}};
	       = {1, 0, 2, 0, 3, 4};

   
   
   
