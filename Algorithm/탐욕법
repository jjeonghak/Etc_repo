// 탐욕법(Greedy method)은 각 단계마다 지금 당장 가장 좋은 방법을 선택
// 지금의 선택이 앞으로 남은 선택들에 어떤 영향을 끼칠지 고려하지 않음, 따라서 항상 최적해를 찾지 못함
// 탐욕법을 사용해도 항상 최적해를 구할 수 있는 문제를 만난 경우, 탐욕법은 동적 계획법보다 수행 시간이 빠름
// 시간이나 공간적 제약으로 최적해가 아닌 근사해를 구할 때 유용하다.

// 정당성 증명
1. 탐욕적 선택속성(Greedy choice property) : 동적계획법처럼 답의 모든 부분을 고려하지 않고 탐욕적 선택으로 최적해 가능한지  
2. 최적부분구조(Optimal substructure) : 부분 문제의 최적해가 전체 문제의 최적해를 만들 수 있는지

// 탐욕적 알고리즘 구현방식
1. 문제의 답을 만드는 과정을 여러 조각으로 나눈다.
2. 각 조각마다 어떤 우선순위로 선택을 내릴지 결정한다.
3. 어떤 방식이 동작할 것 같으면 두가지 속성 증명
 1) 탐욕적 선택속성 : 항상 각 단계에서 우리가 선택한 답을 포함한 최적해 존재함 증명
 2) 최적부분구조 : 각 단계에서 항상 최적의 선택만을 했을 때 전체 최적해를 구할 수 있는지 증명
 
 
