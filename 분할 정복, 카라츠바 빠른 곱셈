// 일반적인 두 큰 수의 곱셈, 시간 복잡도 O(N^2)
void normalize(vector<int>& num) { //num[]의 자릿수 올림을 처리
	num.push_back(0);
	for (int i = 0; i + 1 < num.size(); i++) {
		if (num[i] < 0) {
			int borrow = (abs(num[i]) + 9) / 10;
			num[i + 1] -= borrow;
			num[i] += borrow * 10;
		}
		else {
			num[i + 1] += num[i] / 10;
			num[i] %= 10;
		}
	}
	while (num.size() > 1 && num.back() == 0) num.pop_back();
}

vector<int> multiply(const vector<int>& a, const vector<int>& b) { //각 배열에는 각 수의 자릿수가 1의 자리에서부터 저장
	vector<int> c(a.size() + b.size() + 1, 0);
	for (int i = 0; i < a.size(); i++) {
		for (int j = 0; j < b.size(); j++) {
			c[i + j] += a[i] * b[j];
		}
	}
	normalize(c);
	return c;
}

// 카라츠바의 빠른 정수 곱셈, 시간 복잡도 O(N^lg3)
// Time Complexity Analysis(worst-case)
1. Basic Operation : the manipulation of one digit(m times)
2. Input Size : n, the number of digits for two integers
   W(s) = 0
   W(N) = 3W(N/2) + cN

카라츠바의 빠른 곱셈 알고리즘은 두 수를 각각 절반으로 나눈다. a와 b가 256자리라면 a1과 b1은 첫 128자리, a0와 b0는 그 다음 128자리를 저장
즉, a = a1*10^128 + a0, b = b1*10^128 + b0 이다.
카라츠바는 이때 a*b를 세개의 조각을 이용해 표현 : z0, z1, z2
a*b = (a1*10^128 + a0)*(b1*10^128 + b0)
    = a1*b1*10^256 + (a1*b0 + a0*b1)*10^128 + a0*b0
    = z0*10^256 + z1*10^128 + z2 
    *z1 = (a0 + a1)*(b0 + b1) - z1 - z2

    
void addTo(vector<int>& a, const vector<int>& b, int k); //a+=b*(10^k) 구현
void subForm(vector<int>& a, const vector<int>& b); //a-=b 구현, a>=b 가정

vector<int> karatsuba(const vector<int>& a, const vector<int>& b) {
	int an = a.size(), bn = b.size();
	if (an < bn) return karatsuba(b, a); //a가 b보다 짧을 경우 변경
	if (an == 0 || bn == 0) return vector<int>(); //기저사례 : a나 b가 비어있는 경우
	if (an <= 50) return multiply(a, b); //기저사례 : a가 비교적 짧은 경우 일반적인 곱셈으로 변경
	int half = an / 2; //a와 b를 밑에서 half 자리와 나머지로 분리
	vector<int> a0(a.begin(), a.begin() + half);
	vector<int> a1(a.begin() + half, a.end());
	vector<int> b0(b.begin(), b.begin() + min<int>(b.size(), half));
	vector<int> b1(b.begin() + min<int>(b.size(), half), b.end());

	vector<int> z2 = karatsuba(a1, b1); //z2 = a1 * b1
	vector<int> z0 = karatsuba(a0, b0); //z0 = a0 * b0
	
	addTo(a0, a1, 0); //a0 = a0 + a1
	addTo(b0, b1, 0); //b0 = b0 + b1
	
	vector<int> z1 = karatsuba(a0, b0); //z1 = (a0 * b0) - z0 - z2
	subForm(z1, z0);
	subForm(z1, z2);

	vector<int> ret; //ret = z0 + z1*10^half + z2*10^(half*2) 
	addTo(ret, z0, 0);
	addTo(ret, z1, half);
	addTo(ret, z2, half + half);
	return ret;
}


