// 다익스트라(Dijkstra) 알고리즘이란 다이나믹 프로그래밍을 활용한 대표적인 최단 경로 탐색 알고리즘
// 특정한 하나의 정점에서 다른 모든 정점으로 가는 최단 경로를 알려주며 음의 값을 갖는 간선을 포함할 수 없다.

최단 거리는 여러가지 최단 거리로 이루어져 있기 때문에 다이나믹 프로그래밍으로 분류
하나의 최단 거리를 구할 때 그 이전까지 구했던 최단 거리 정보를 그대로 사용한다.

1) 출발 노드 설정
2) 출발 노드 기준으로 각 노드 최소 비용 저장
3) 방문하지 않은 노드 중 가장 적은 비용의 노드를 선택
4) 해당 노드를 거쳐서 특정한 노드로 가는 경우를 고려하여 최소 비용 갱신
5) 위 과정에서 3, 4번 과정 반복 

// 선형 탐색 다익스트라 시간 복잡도 O(N^2)
int number = 6;
int INF = 1000000000; 
bool vis[6]; //방문한 노드
int dis[6]; //최단 거리
int a[6][6] = { //노드의 갯수에 따라 간선 상태
	{0, 2, 5, 1, INF, INF},
	{2, 0, 3, 2, INF, INF},
	{5, 3, 0, 3, 1, 5},
	{1, 2, 3, 0, 1, INF},
	{INF, INF, 1, 1, 0, 2},
	{INF, INF, 5, INF, 2, 0},
};

int getSmallIndex() { //선형 탐색 O(N) -> 힙을 이용한 탐색으로 바꾸면 시간 복잡도 낮아짐
	int min = INF;
	int index = 0;
	for (int i = 0; i < number; i++) {
		if (dis[i] < min && !vis[i]) { //방문하지 않은 노드들 중 최소 거리 노드를 탐색
			min = dis[i];
			index = i;
		}
	}
	return index;
}

void dijkstra(int start) { //다익스트라 수행 함수
	for (int i = 0; i < number; i++) { //결과적으로 dis[]는 최소 비용이 담기는 배열
		dis[i] = a[start][i];
	}
	vis[start] = true;
	for (int i = 0; i < number - 2; i++) { //O(N)
		int current = getSmallIndex(); //가장 최소의 노드
		vis[current] = true; //방문 처리
		for (int j = 0; j < number; j++) { //그 노드에 인접한 노드들 탐색
			if (!vis[j]) {
				if (dis[current] + a[current][j] < dis[j]) { //최소 비용 갱신
					dis[j] = dis[current] + a[current][j];
				}
			}
		}
	}
}

// 힙 구조 다익스트라 시간 복잡도 O(N*logN)
int number = 6;
int INF = 1000000000; 
int dis[7]; //최소 비용
vector<pair<int, int>> a[7]; //간선 정보

void dijkstra(int start) { //다익스트라 수행 함수
	dis[start] = 0;
	priority_queue<pair<int, int>> pq;// 힙 구조
	pq.push(make_pair(start, 0));
	while (!pq.empty()) { 
		int current = pq.top().first; //가장 최소 비용의 노드가 top에 존재
		int distance = -pq.top().second; //짧은 것이 먼저 오도록 음수화
		pq.pop();
		if (dis[current] < distance) continue; //최단 거리가 아닌 경우 
		for (int i = 0; i < a[current].size(); i++) {
			int next = a[current][i].first; //선택된 노드의 인접 노드
			int nextDistance = distance + a[current][i].second; //선택된 노드를 거쳐서 인접 노드로 가는 비용
			if (nextDistance < dis[next]) { //최소 비용 갱신
				dis[next] = nextDistance;
				pq.push(make_pair(next, -nextDistance)); //삽입시에 거리 양수화 
			}
		}
	}
}

int main(void) {
	for (int i = 1; i <= number; i++) {
		dis[i] = INF; //거리 초기화
	}
	a[1].push_back(make_pair(2, 2)); //1번 노드에서 2번 노드로 가는 비용 2
	a[1].push_back(make_pair(3, 5)); //1번 노드에서 3번 노드로 가는 비용 5
	a[1].push_back(make_pair(4, 1)); //1번 노드에서 4번 노드로 가는 비용 1

	a[2].push_back(make_pair(1, 2));
	a[2].push_back(make_pair(3, 3));
	a[2].push_back(make_pair(4, 2));

	a[3].push_back(make_pair(1, 5));
	a[3].push_back(make_pair(2, 3));
	a[3].push_back(make_pair(4, 3));
	a[3].push_back(make_pair(5, 1));
	a[3].push_back(make_pair(6, 5));

	a[4].push_back(make_pair(1, 1));
	a[4].push_back(make_pair(2, 2));
	a[4].push_back(make_pair(3, 3));
	a[4].push_back(make_pair(5, 1));

	a[5].push_back(make_pair(3, 1));
	a[5].push_back(make_pair(4, 1));
	a[5].push_back(make_pair(6, 2));

	a[6].push_back(make_pair(3, 5));
	a[6].push_back(make_pair(5, 2));
	dijkstra(1);
	for (int i = 1; i <= number; i++) {
		cout << dis[i];
	}
	return 0;
}
